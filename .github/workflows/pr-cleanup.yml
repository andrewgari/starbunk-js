name: PR Cleanup

on:
    pull_request:
        types: [closed]

env:
  CONFIG_FILE: '.github/ghcr-cleanup-config.yml'
  UTILS_SCRIPT: '.github/scripts/ghcr-cleanup-utils.js'

jobs:
    cleanup:
        name: üßπ Cleanup PR Artifacts
        runs-on: ubuntu-latest
        permissions:
            packages: write
            contents: read
            pull-requests: read
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '18'

            - name: Delete PR Container Images
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const fs = require('fs');
                      const yaml = require('js-yaml');
                      const { owner, repo } = context.repo;
                      const prNumber = context.payload.pull_request.number;

                      console.log(`üßπ Cleaning up PR ${prNumber} container images...`);

                      // Load utilities
                      const ghcrUtils = require('./.github/scripts/ghcr-cleanup-utils.js');

                      // Load configuration
                      const configYaml = fs.readFileSync('.github/ghcr-cleanup-config.yml', 'utf8');
                      const config = yaml.load(configYaml);

                      try {
                          // Initialize utilities
                          await ghcrUtils.initialize(github, context, config);

                          const containers = ['bunkbot', 'djcova', 'starbunk-dnd', 'covabot'];
                          let totalDeleted = 0;
                          let totalErrors = 0;

                          for (const containerName of containers) {
                              try {
                                  console.log(`üîç Processing ${containerName}...`);

                                  // Get all versions of the package
                                  const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                                      package_type: 'container',
                                      package_name: containerName,
                                      username: owner,
                                      per_page: 100
                                  });

                                  console.log(`Found ${versions.length} total versions for ${containerName}`);

                                  // Find versions with PR tags matching this PR number
                                  const prVersions = versions.filter(version => {
                                      const tags = version.metadata?.container?.tags || [];
                                      return tags.some(tag =>
                                          tag === `pr-${prNumber}-${containerName}` ||
                                          tag === `pr-${prNumber}` ||
                                          tag === 'snapshot' // Legacy snapshot handling
                                      );
                                  });

                                  console.log(`Found ${prVersions.length} PR-specific versions for ${containerName}`);

                                  // Delete each PR version
                                  for (const version of prVersions) {
                                      const tags = version.metadata?.container?.tags || [];
                                      const ageInDays = Math.floor((Date.now() - new Date(version.created_at).getTime()) / (24 * 60 * 60 * 1000));

                                      console.log(`Deleting version ${version.id} with tags: ${tags.join(', ')} (${ageInDays} days old)`);

                                      await github.rest.packages.deletePackageVersionForUser({
                                          package_type: 'container',
                                          package_name: containerName,
                                          username: owner,
                                          package_version_id: version.id
                                      });

                                      totalDeleted++;

                                      // Rate limiting to avoid API throttling
                                      await new Promise(resolve => setTimeout(resolve, 500));
                                  }

                                  if (prVersions.length === 0) {
                                      console.log(`‚úÖ No PR-specific images found for ${containerName}`);
                                  } else {
                                      console.log(`‚úÖ Deleted ${prVersions.length} PR image(s) for ${containerName}`);
                                  }

                              } catch (error) {
                                  console.error(`‚ùå Failed to delete ${containerName} images: ${error.message}`);
                                  totalErrors++;
                                  // Don't fail the job if image doesn't exist or there are permission issues
                              }
                          }

                          // Generate summary
                          console.log(`\nüìä PR ${prNumber} cleanup summary:`);
                          console.log(`   - Total images deleted: ${totalDeleted}`);
                          console.log(`   - Errors encountered: ${totalErrors}`);
                          console.log(`   - Status: ${totalErrors === 0 ? '‚úÖ Success' : '‚ö†Ô∏è Completed with errors'}`);

                          // Create job summary
                          await core.summary
                              .addHeading(`üßπ PR ${prNumber} Cleanup Results`)
                              .addRaw([
                                  '**Summary:**',
                                  `- **Images Deleted:** ${totalDeleted}`,
                                  `- **Errors:** ${totalErrors}`,
                                  `- **Status:** ${totalErrors === 0 ? '‚úÖ Success' : '‚ö†Ô∏è Completed with errors'}`,
                                  '',
                                  '**Containers Processed:**',
                                  ...containers.map(c => `- ${c}`),
                                  '',
                                  '**Pattern Matching:**',
                                  `- \`pr-${prNumber}-{container}\` tags`,
                                  `- \`pr-${prNumber}\` tags`,
                                  '- Legacy `snapshot` tags'
                              ].join('\n'))
                              .write();

                      } catch (error) {
                          console.error(`‚ùå PR cleanup failed: ${error.message}`);
                          throw error; // Fail the job on critical errors
                      }
