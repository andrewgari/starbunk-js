/// <reference types="cypress" />
import channelIDs from '../../../src/discord/channelIDs';
import BOT_CONSTANTS from '../../support/botConstants';
import { testBot, testBotNoResponse } from '../../support/botTestHelper';

/**
 * E2E tests for all bots in a single file
 *
 * This file tests all bots with their basic functionality
 * using constants from the model files for consistency
 */
describe('All Bots E2E Tests', () => {
  // Map of bot names in code vs. bot names in Discord
  const BOT_NAMES_IN_DISCORD = {
    NICE_BOT: 'Nice-Bot',
    SPIDER_BOT: 'Spider-Bot',
    PICKLE_BOT: 'Pickle-Bot',
    HOLD_BOT: 'Hold-Bot',
    CHAOS_BOT: 'Chaos-Bot',
    BABY_BOT: 'Baby-Bot',
    GUNDAM_BOT: 'Gundam-Bot',
    EZIO_BOT: 'Ezio-Bot',
    SIGGREAT_BOT: 'SigGreat-Bot',
    BOT_BOT: 'Bot-Bot',
    CHECK_BOT: 'Check-Bot',
    VENN_BOT: 'Venn-Bot',
    SHEESH_BOT: 'Sheesh-Bot',
    MACARONI_BOT: 'Macaroni-Bot',
    ATTITUDE_BOT: 'Attitude-Bot',
    GUY_BOT: 'Guy-Bot',
    MUSIC_CORRECT_BOT: 'Music-Correct-Bot'
  };

  // Helper function to create a flexible regex pattern for bot responses
  const createFlexiblePattern = (response: string): RegExp => {
    // Create a case-insensitive pattern that's flexible with punctuation
    return new RegExp(response.replace(/[.*+?^${}()|[\]\\]/g, '\\$&').replace(/\.$/, '\\.?'), 'i');
  };

  before(() => {
    // Initialize Discord client before running tests
    cy.initDiscordClient();
  });

  // Add your bot tests here using the constants and helper functions
  // Example:
  // describe('Bot-Name', () => {
  //   testBot({
  //     botName: BOT_NAMES_IN_DISCORD.BOT_NAME,
  //     triggerMessage: BOT_CONSTANTS.BOT_NAME.TEST.MESSAGE.TRIGGER,
  //     expectedResponsePattern: createFlexiblePattern(BOT_CONSTANTS.BOT_NAME.RESPONSE),
  //     channelId: channelIDs.NebulaChat
  //   });
  //
  //   testBotNoResponse(
  //     BOT_CONSTANTS.BOT_NAME.TEST.MESSAGE.UNRELATED,
  //     channelIDs.NebulaChat
  //   );
  // });
});
