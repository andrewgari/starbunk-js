name: Container Registry Cleanup

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (do not actually delete anything)'
        required: false
        default: 'false'
        type: boolean
      retention_days:
        description: 'Retention period in days'
        required: false
        default: '30'
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  cleanup-old-containers:
    name: Cleanup Old PR Containers
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      pull-requests: read
    steps:
      - name: Cleanup old PR containers
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner } = context.repo;
            const containers = ['bunkbot', 'djcova', 'starbunk-dnd', 'covabot'];
            const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';
            const retentionDays = parseInt('${{ github.event.inputs.retention_days }}' || '30');
            const cutoffDate = new Date(Date.now() - (retentionDays * 24 * 60 * 60 * 1000));

            console.log(`🗑️ Container Registry Cleanup`);
            console.log(`📅 Retention period: ${retentionDays} days`);
            console.log(`📅 Cutoff date: ${cutoffDate.toISOString()}`);
            console.log(`🔍 Dry run: ${dryRun ? 'YES' : 'NO'}`);
            console.log('');

            // Get list of open PRs to avoid deleting active PR containers
            const { data: openPRs } = await github.rest.pulls.list({
              owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            const openPRNumbers = new Set(openPRs.map(pr => pr.number));
            console.log(`🔓 Found ${openPRNumbers.size} open PRs: ${Array.from(openPRNumbers).join(', ')}`);
            console.log('');

            let totalDeleted = 0;
            let totalScanned = 0;

            for (const container of containers) {
              try {
                console.log(`📦 Processing container: ${container}`);

                const versions = await github.paginate(
                  github.rest.packages.getAllPackageVersionsForPackageOwnedByUser,
                  {
                    package_type: 'container',
                    package_name: container,
                    username: owner,
                    per_page: 100
                  }
                );

                totalScanned += versions.length;
                console.log(`  📊 Found ${versions.length} total versions`);

                let containerDeleted = 0;

                for (const version of versions) {
                  const tags = version.metadata?.container?.tags || [];
                  const createdAt = new Date(version.created_at);
                  const isOld = createdAt < cutoffDate;

                  // Check if this is a PR-related container
                  const prTags = tags.filter(tag => tag.startsWith('pr-'));

                  if (prTags.length === 0) {
                    // Not a PR container, skip
                    continue;
                  }

                  // Extract PR numbers from tags
                  const prNumbers = prTags.map(tag => {
                    const match = tag.match(/^pr-(\d+)-/);
                    return match ? parseInt(match[1]) : null;
                  }).filter(num => num !== null);

                  // Check if any of the PR numbers are still open
                  const hasOpenPR = prNumbers.some(prNum => openPRNumbers.has(prNum));

                  if (hasOpenPR) {
                    console.log(`  ⏭️  Skipping version with tags [${tags.join(', ')}] - PR still open`);
                    continue;
                  }

                  if (!isOld) {
                    console.log(`  ⏭️  Skipping version with tags [${tags.join(', ')}] - not old enough (${Math.floor((Date.now() - createdAt.getTime()) / (24 * 60 * 60 * 1000))} days)`);
                    continue;
                  }

                  // This version should be deleted
                  const ageInDays = Math.floor((Date.now() - createdAt.getTime()) / (24 * 60 * 60 * 1000));

                  if (dryRun) {
                    console.log(`  🔍 [DRY RUN] Would delete version with tags [${tags.join(', ')}] - ${ageInDays} days old`);
                  } else {
                    try {
                      await github.rest.packages.deletePackageVersionForUser({
                        package_type: 'container',
                        package_name: container,
                        username: owner,
                        package_version_id: version.id
                      });
                      console.log(`  ✅ Deleted version with tags [${tags.join(', ')}] - ${ageInDays} days old`);
                      containerDeleted++;
                    } catch (deleteError) {
                      console.log(`  ❌ Failed to delete version with tags [${tags.join(', ')}] - ${deleteError.message}`);
                    }
                  }
                }

                totalDeleted += containerDeleted;
                console.log(`  📊 ${container}: ${containerDeleted} versions ${dryRun ? 'would be' : ''} deleted`);
                console.log('');

              } catch (error) {
                console.log(`❌ Failed to process ${container} container: ${error.message}`);
                console.log('');
              }
            }

            console.log(`🎉 Cleanup Summary:`);
            console.log(`  📊 Total versions scanned: ${totalScanned}`);
            console.log(`  🗑️  Total versions ${dryRun ? 'would be' : ''} deleted: ${totalDeleted}`);
            console.log(`  🔓 Open PRs protected: ${openPRNumbers.size}`);
            console.log(`  📅 Retention period: ${retentionDays} days`);

            if (dryRun) {
              console.log(`\n💡 This was a dry run. To actually delete containers, run with dry_run=false`);
            }

  cleanup-untagged-images:
    name: Cleanup Untagged Images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Delete untagged container images
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner } = context.repo;
            const containers = ['bunkbot', 'djcova', 'starbunk-dnd', 'covabot'];
            const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';

            console.log(`🗑️ Untagged Images Cleanup`);
            console.log(`🔍 Dry run: ${dryRun ? 'YES' : 'NO'}`);
            console.log('');

            let totalDeleted = 0;

            for (const container of containers) {
              try {
                console.log(`📦 Processing container: ${container}`);

                const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                  package_type: 'container',
                  package_name: container,
                  username: owner,
                  per_page: 100
                });

                const untaggedVersions = versions.filter(version => {
                  const tags = version.metadata?.container?.tags || [];
                  return tags.length === 0;
                });

                console.log(`  📊 Found ${untaggedVersions.length} untagged versions out of ${versions.length} total`);

                for (const version of untaggedVersions) {
                  const createdAt = new Date(version.created_at);
                  const ageInDays = Math.floor((Date.now() - createdAt.getTime()) / (24 * 60 * 60 * 1000));

                  if (dryRun) {
                    console.log(`  🔍 [DRY RUN] Would delete untagged version ${version.id} - ${ageInDays} days old`);
                  } else {
                    try {
                      await github.rest.packages.deletePackageVersionForUser({
                        package_type: 'container',
                        package_name: container,
                        username: owner,
                        package_version_id: version.id
                      });
                      console.log(`  ✅ Deleted untagged version ${version.id} - ${ageInDays} days old`);
                      totalDeleted++;
                    } catch (deleteError) {
                      console.log(`  ❌ Failed to delete untagged version ${version.id} - ${deleteError.message}`);
                    }
                  }
                }

                console.log('');

              } catch (error) {
                console.log(`❌ Failed to process ${container} container: ${error.message}`);
                console.log('');
              }
            }

            console.log(`🎉 Untagged Images Cleanup Summary:`);
            console.log(`  🗑️  Total untagged images ${dryRun ? 'would be' : ''} deleted: ${totalDeleted}`);

            if (dryRun) {
              console.log(`\n💡 This was a dry run. To actually delete images, run with dry_run=false`);
            }
