version: '3.8'

services:
  # Shared database service
  postgres:
    image: postgres:15-alpine
    container_name: starbunk-postgres
    environment:
      POSTGRES_DB: starbunk
      POSTGRES_USER: starbunk
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-starbunk123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U starbunk"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # BunkBot - Reply bots and admin commands
  bunkbot:
    build:
      context: .
      dockerfile: containers/bunkbot/Dockerfile
    container_name: starbunk-bunkbot
    user: "1000:1000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DEBUG=${DEBUG:-false}
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OLLAMA_API_URL=${OLLAMA_API_URL}
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DJCova - Music service
  djcova:
    build:
      context: .
      dockerfile: containers/djcova/Dockerfile
    container_name: starbunk-djcova
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DEBUG=${DEBUG:-false}
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
    volumes:
      - ./data/music:/app/data/music:rw
      - ./logs:/app/logs:rw
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Starbunk-DND - D&D features and Snowbunk bridge
  starbunk-dnd:
    build:
      context: .
      dockerfile: containers/starbunk-dnd/Dockerfile
    container_name: starbunk-dnd
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DEBUG=${DEBUG:-false}
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
      - SNOWBUNK_TOKEN=${SNOWBUNK_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OLLAMA_API_URL=${OLLAMA_API_URL}
      - VECTOR_CONTEXT_DIR=/app/data/vectors
    volumes:
      - ./data:/app/data:rw
      - ./data/campaigns:/app/data/campaigns:rw
      - ./data/vectors:/app/data/vectors:rw
      - ./logs:/app/logs:rw
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CovaBot - AI personality bot
  covabot:
    build:
      context: .
      dockerfile: containers/covabot/Dockerfile
    container_name: starbunk-covabot
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DEBUG=${DEBUG:-false}
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OLLAMA_API_URL=${OLLAMA_API_URL}
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: starbunk-network
