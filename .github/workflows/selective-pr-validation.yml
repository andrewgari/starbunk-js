name: Selective PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_all:
        description: 'Force validation of all containers'
        required: false
        type: boolean
        default: false
      containers:
        description: 'Comma-separated list of containers to validate (e.g., bunkbot,covabot)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  NODE_VERSION: '20'

permissions:
  contents: read
  packages: write
  pull-requests: write
  checks: write

concurrency:
  group: selective-validation-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # CHANGE DETECTION - Determine which containers need validation
  # =============================================================================
  detect-changes:
    name: üîç Detect Container Changes
    runs-on: ubuntu-latest
    outputs:
      # Individual container change flags
      shared: ${{ steps.changes.outputs.shared }}
      bunkbot: ${{ steps.changes.outputs.bunkbot }}
      djcova: ${{ steps.changes.outputs.djcova }}
      starbunk-dnd: ${{ steps.changes.outputs.starbunk-dnd }}
      covabot: ${{ steps.changes.outputs.covabot }}

      # Infrastructure and critical changes
      critical: ${{ steps.changes.outputs.critical-infrastructure }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      tests-only: ${{ steps.changes.outputs.tests-only }}

      # Validation strategy outputs
      validate-bunkbot: ${{ steps.strategy.outputs.validate-bunkbot }}
      validate-djcova: ${{ steps.strategy.outputs.validate-djcova }}
      validate-starbunk-dnd: ${{ steps.strategy.outputs.validate-starbunk-dnd }}
      validate-covabot: ${{ steps.strategy.outputs.validate-covabot }}

      # Docker build strategy
      build-bunkbot: ${{ steps.strategy.outputs.build-bunkbot }}
      build-djcova: ${{ steps.strategy.outputs.build-djcova }}
      build-starbunk-dnd: ${{ steps.strategy.outputs.build-starbunk-dnd }}
      build-covabot: ${{ steps.strategy.outputs.build-covabot }}

      # Overall strategy flags
      should-skip: ${{ steps.strategy.outputs.should-skip }}
      containers-summary: ${{ steps.strategy.outputs.containers-summary }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect path changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: .github/path-filters-optimized.yml

      - name: Determine validation strategy
        id: strategy
        run: |
          echo "üîç Change Detection Results:"
          echo "  Shared: ${{ steps.changes.outputs.shared }}"
          echo "  BunkBot: ${{ steps.changes.outputs.bunkbot }}"
          echo "  DJCova: ${{ steps.changes.outputs.djcova }}"
          echo "  Starbunk-DND: ${{ steps.changes.outputs.starbunk-dnd }}"
          echo "  CovaBot: ${{ steps.changes.outputs.covabot }}"
          echo "  Critical: ${{ steps.changes.outputs.critical-infrastructure }}"
          echo "  Docs Only: ${{ steps.changes.outputs.docs-only }}"
          echo "  Tests Only: ${{ steps.changes.outputs.tests-only }}"

          # Initialize validation flags
          validate_bunkbot="false"
          validate_djcova="false"  # Special: djcova skips validation but builds images
          validate_starbunk_dnd="false"
          validate_covabot="false"

          # Initialize build flags
          build_bunkbot="false"
          build_djcova="false"
          build_starbunk_dnd="false"
          build_covabot="false"

          should_skip="false"
          containers_summary=""

          # Handle manual workflow dispatch with specific containers
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ -n "${{ github.event.inputs.containers }}" ]]; then
            echo "üéØ Manual dispatch with specific containers: ${{ github.event.inputs.containers }}"
            IFS=',' read -ra CONTAINERS <<< "${{ github.event.inputs.containers }}"
            for container in "${CONTAINERS[@]}"; do
              container=$(echo "$container" | xargs) # trim whitespace
              case "$container" in
                "bunkbot")
                  validate_bunkbot="true"
                  build_bunkbot="true"
                  ;;
                "djcova")
                  # Special: djcova only builds, doesn't validate
                  build_djcova="true"
                  ;;
                "starbunk-dnd")
                  validate_starbunk_dnd="true"
                  build_starbunk_dnd="true"
                  ;;
                "covabot")
                  validate_covabot="true"
                  build_covabot="true"
                  ;;
              esac
            done
          else
            # Automatic detection based on changes
            force_all="${{ github.event.inputs.force_all }}"

            # Check if shared package or critical infrastructure changed
            if [[ "${{ steps.changes.outputs.shared }}" == "true" ]] || \
               [[ "${{ steps.changes.outputs.critical-infrastructure }}" == "true" ]] || \
               [[ "$force_all" == "true" ]]; then
              echo "üì¶ Shared/critical changes detected - validating all containers"
              validate_bunkbot="true"
              validate_starbunk_dnd="true"
              validate_covabot="true"
              build_bunkbot="true"
              build_djcova="true"  # Special: djcova builds but doesn't validate
              build_starbunk_dnd="true"
              build_covabot="true"
            else
              # Selective validation based on individual container changes
              echo "üéØ Selective validation based on changed containers"

              # BunkBot: build ‚Üí test ‚Üí lint
              if [[ "${{ steps.changes.outputs.bunkbot }}" == "true" ]]; then
                validate_bunkbot="true"
                build_bunkbot="true"
              fi

              # DJCova: skip validation, but build Docker image if changed
              if [[ "${{ steps.changes.outputs.djcova }}" == "true" ]]; then
                build_djcova="true"
              fi

              # Starbunk-DND: build ‚Üí test ‚Üí lint
              if [[ "${{ steps.changes.outputs.starbunk-dnd }}" == "true" ]]; then
                validate_starbunk_dnd="true"
                build_starbunk_dnd="true"
              fi

              # CovaBot: build ‚Üí test ‚Üí lint
              if [[ "${{ steps.changes.outputs.covabot }}" == "true" ]]; then
                validate_covabot="true"
                build_covabot="true"
              fi
            fi
          fi

          # Handle docs-only or test-only changes
          if [[ "${{ steps.changes.outputs.docs-only }}" == "true" ]] && \
             [[ "$validate_bunkbot" == "false" ]] && \
             [[ "$validate_starbunk_dnd" == "false" ]] && \
             [[ "$validate_covabot" == "false" ]] && \
             [[ "$build_djcova" == "false" ]]; then
            echo "üìö Documentation-only changes - skipping all validation"
            should_skip="true"
          fi

          # Build summary for reporting
          validated_containers=()
          [[ "$validate_bunkbot" == "true" ]] && validated_containers+=("bunkbot")
          [[ "$validate_starbunk_dnd" == "true" ]] && validated_containers+=("starbunk-dnd")
          [[ "$validate_covabot" == "true" ]] && validated_containers+=("covabot")

          built_containers=()
          [[ "$build_bunkbot" == "true" ]] && built_containers+=("bunkbot")
          [[ "$build_djcova" == "true" ]] && built_containers+=("djcova")
          [[ "$build_starbunk_dnd" == "true" ]] && built_containers+=("starbunk-dnd")
          [[ "$build_covabot" == "true" ]] && built_containers+=("covabot")

          if [ ${#validated_containers[@]} -gt 0 ]; then
            containers_summary="Validating: $(IFS=', '; echo "${validated_containers[*]}")"
          fi

          if [ ${#built_containers[@]} -gt 0 ]; then
            if [[ -n "$containers_summary" ]]; then
              containers_summary="$containers_summary | Building: $(IFS=', '; echo "${built_containers[*]}")"
            else
              containers_summary="Building: $(IFS=', '; echo "${built_containers[*]}")"
            fi
          fi

          [[ -z "$containers_summary" ]] && containers_summary="No containers affected"

          # Output strategy decisions
          echo "validate-bunkbot=$validate_bunkbot" >> $GITHUB_OUTPUT
          echo "validate-djcova=$validate_djcova" >> $GITHUB_OUTPUT
          echo "validate-starbunk-dnd=$validate_starbunk_dnd" >> $GITHUB_OUTPUT
          echo "validate-covabot=$validate_covabot" >> $GITHUB_OUTPUT

          echo "build-bunkbot=$build_bunkbot" >> $GITHUB_OUTPUT
          echo "build-djcova=$build_djcova" >> $GITHUB_OUTPUT
          echo "build-starbunk-dnd=$build_starbunk_dnd" >> $GITHUB_OUTPUT
          echo "build-covabot=$build_covabot" >> $GITHUB_OUTPUT

          echo "should-skip=$should_skip" >> $GITHUB_OUTPUT
          echo "containers-summary=$containers_summary" >> $GITHUB_OUTPUT

          echo ""
          echo "üìã Validation Strategy:"
          echo "  BunkBot: validate=$validate_bunkbot, build=$build_bunkbot"
          echo "  DJCova: validate=$validate_djcova, build=$build_djcova (‚ö†Ô∏è  VALIDATION SKIPPED)"
          echo "  Starbunk-DND: validate=$validate_starbunk_dnd, build=$build_starbunk_dnd"
          echo "  CovaBot: validate=$validate_covabot, build=$build_covabot"
          echo "  Should Skip: $should_skip"
          echo "  Summary: $containers_summary"

  # =============================================================================
  # DEPENDENCY PREPARATION - Setup shared dependencies once
  # =============================================================================
  prepare-dependencies:
    name: üì¶ Prepare Dependencies
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-skip != 'true'

    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies and shared build
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            containers/shared/node_modules
            containers/bunkbot/node_modules
            containers/djcova/node_modules
            containers/starbunk-dnd/node_modules
            containers/covabot/node_modules
            containers/shared/dist
          key: deps-v3-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('containers/shared/src/**', 'containers/shared/package.json', 'containers/shared/tsconfig.json') }}
          restore-keys: |
            deps-v3-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            deps-v3-${{ runner.os }}-

      - name: Install dependencies in parallel
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "üöÄ Installing dependencies in parallel..."

          # Install root dependencies
          npm ci --prefer-offline --no-audit --silent &
          root_pid=$!

          # Install container dependencies in parallel (background jobs)
          (cd containers/shared && npm ci --prefer-offline --no-audit --silent) &
          shared_pid=$!

          (cd containers/bunkbot && npm ci --prefer-offline --no-audit --silent) &
          bunkbot_pid=$!

          (cd containers/djcova && npm ci --prefer-offline --no-audit --silent) &
          djcova_pid=$!

          (cd containers/starbunk-dnd && npm ci --prefer-offline --no-audit --silent) &
          dnd_pid=$!

          (cd containers/covabot && npm ci --prefer-offline --no-audit --silent) &
          covabot_pid=$!

          # Wait for all installations with timeout protection
          echo "‚è≥ Waiting for dependency installations..."
          wait $root_pid $shared_pid $bunkbot_pid $djcova_pid $dnd_pid $covabot_pid

          echo "‚úÖ All dependencies installed successfully"

      - name: Build shared package
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "üî® Building shared package..."
          cd containers/shared
          npm run build
          echo "‚úÖ Shared package built successfully"

  # =============================================================================
  # CONTAINER VALIDATION JOBS - Individual build ‚Üí test ‚Üí lint sequences
  # =============================================================================

  # BunkBot Validation: build ‚Üí test ‚Üí lint
  validate-bunkbot:
    name: ü§ñ BunkBot
    runs-on: ubuntu-latest
    needs: [detect-changes, prepare-dependencies]
    if: needs.detect-changes.outputs.validate-bunkbot == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.npm
            node_modules
            containers/shared/node_modules
            containers/bunkbot/node_modules
            containers/djcova/node_modules
            containers/starbunk-dnd/node_modules
            containers/covabot/node_modules
            containers/shared/dist
          key: deps-v3-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('containers/shared/src/**', 'containers/shared/package.json', 'containers/shared/tsconfig.json') }}
          fail-on-cache-miss: true

      - name: üî® Build BunkBot
        run: |
          echo "üî® Building BunkBot container..."
          cd containers/bunkbot
          npm run build
          echo "‚úÖ BunkBot build completed"

      - name: üß™ Test BunkBot
        run: |
          echo "üß™ Running BunkBot tests..."
          cd containers/bunkbot
          npm test -- --passWithNoTests --coverage=false --verbose
          echo "‚úÖ BunkBot tests completed"

      - name: üßπ Lint BunkBot
        run: |
          echo "üßπ Linting BunkBot code..."
          cd containers/bunkbot
          if npm run --silent lint 2>/dev/null; then
            npm run lint
          else
            echo "Using root ESLint configuration for BunkBot"
            cd ../..
            npx eslint "containers/bunkbot/src/**/*.ts" --format=stylish
          fi
          echo "‚úÖ BunkBot linting completed"

  # Starbunk-DND Validation: build ‚Üí test ‚Üí lint
  validate-starbunk-dnd:
    name: üêâ Starbunk-DND
    runs-on: ubuntu-latest
    needs: [detect-changes, prepare-dependencies]
    if: needs.detect-changes.outputs.validate-starbunk-dnd == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.npm
            node_modules
            containers/shared/node_modules
            containers/bunkbot/node_modules
            containers/djcova/node_modules
            containers/starbunk-dnd/node_modules
            containers/covabot/node_modules
            containers/shared/dist
          key: deps-v3-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('containers/shared/src/**', 'containers/shared/package.json', 'containers/shared/tsconfig.json') }}
          fail-on-cache-miss: true

      - name: üî® Build Starbunk-DND
        run: |
          echo "üî® Building Starbunk-DND container..."
          cd containers/starbunk-dnd
          npm run build
          echo "‚úÖ Starbunk-DND build completed"

      - name: üß™ Test Starbunk-DND
        run: |
          echo "üß™ Running Starbunk-DND tests..."
          cd containers/starbunk-dnd
          npm test -- --passWithNoTests --coverage=false --verbose
          echo "‚úÖ Starbunk-DND tests completed"

      - name: üßπ Lint Starbunk-DND
        run: |
          echo "üßπ Linting Starbunk-DND code..."
          cd containers/starbunk-dnd
          if npm run --silent lint 2>/dev/null; then
            npm run lint
          else
            echo "Using root ESLint configuration for Starbunk-DND"
            cd ../..
            npx eslint "containers/starbunk-dnd/src/**/*.ts" --format=stylish
          fi
          echo "‚úÖ Starbunk-DND linting completed"

  # CovaBot Validation: build ‚Üí test ‚Üí lint
  validate-covabot:
    name: üß† CovaBot
    runs-on: ubuntu-latest
    needs: [detect-changes, prepare-dependencies]
    if: needs.detect-changes.outputs.validate-covabot == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.npm
            node_modules
            containers/shared/node_modules
            containers/bunkbot/node_modules
            containers/djcova/node_modules
            containers/starbunk-dnd/node_modules
            containers/covabot/node_modules
            containers/shared/dist
          key: deps-v3-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('containers/shared/src/**', 'containers/shared/package.json', 'containers/shared/tsconfig.json') }}
          fail-on-cache-miss: true

      - name: üî® Build CovaBot
        run: |
          echo "üî® Building CovaBot container..."
          cd containers/covabot
          npm run build
          echo "‚úÖ CovaBot build completed"

      - name: üß™ Test CovaBot
        run: |
          echo "üß™ Running CovaBot tests..."
          cd containers/covabot
          npm test -- --passWithNoTests --coverage=false --verbose
          echo "‚úÖ CovaBot tests completed"

      - name: üßπ Lint CovaBot
        run: |
          echo "üßπ Linting CovaBot code..."
          cd containers/covabot
          if npm run --silent lint 2>/dev/null; then
            npm run lint
          else
            echo "Using root ESLint configuration for CovaBot"
            cd ../..
            npx eslint "containers/covabot/src/**/*.ts" --format=stylish
          fi
          echo "‚úÖ CovaBot linting completed"

  # =============================================================================
  # DOCKER IMAGE BUILDING - Separate jobs for each container
  # =============================================================================

  # BunkBot Docker Build
  build-bunkbot:
    name: üê≥ Build BunkBot Image
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-bunkbot]
    if: |
      always() &&
      needs.detect-changes.outputs.build-bunkbot == 'true' &&
      (needs.validate-bunkbot.result == 'success' || needs.validate-bunkbot.result == 'skipped')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/bunkbot
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }}-bunkbot,enable={{is_pr}}
            type=ref,event=branch,enable={{is_default_branch}}
            type=sha,prefix=main-,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push BunkBot image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: containers/bunkbot/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            CONTAINER_NAME=bunkbot
          provenance: false

  # DJCova Docker Build (special case - no validation but still builds)
  build-djcova:
    name: üê≥ Build DJCova Image
    runs-on: ubuntu-latest
    needs: [detect-changes, prepare-dependencies]
    if: |
      always() &&
      needs.detect-changes.outputs.build-djcova == 'true' &&
      needs.detect-changes.outputs.should-skip != 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/djcova
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }}-djcova,enable={{is_pr}}
            type=ref,event=branch,enable={{is_default_branch}}
            type=sha,prefix=main-,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push DJCova image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: containers/djcova/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            CONTAINER_NAME=djcova
          provenance: false

  # Starbunk-DND Docker Build
  build-starbunk-dnd:
    name: üê≥ Build Starbunk-DND Image
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-starbunk-dnd]
    if: |
      always() &&
      needs.detect-changes.outputs.build-starbunk-dnd == 'true' &&
      (needs.validate-starbunk-dnd.result == 'success' || needs.validate-starbunk-dnd.result == 'skipped')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/starbunk-dnd
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }}-starbunk-dnd,enable={{is_pr}}
            type=ref,event=branch,enable={{is_default_branch}}
            type=sha,prefix=main-,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Starbunk-DND image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: containers/starbunk-dnd/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            CONTAINER_NAME=starbunk-dnd
          provenance: false

  # CovaBot Docker Build
  build-covabot:
    name: üê≥ Build CovaBot Image
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-covabot]
    if: |
      always() &&
      needs.detect-changes.outputs.build-covabot == 'true' &&
      (needs.validate-covabot.result == 'success' || needs.validate-covabot.result == 'skipped')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/covabot
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }}-covabot,enable={{is_pr}}
            type=ref,event=branch,enable={{is_default_branch}}
            type=sha,prefix=main-,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push CovaBot image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: containers/covabot/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            CONTAINER_NAME=covabot
          provenance: false

  # =============================================================================
  # SUCCESS GATE AND REPORTING - Final validation status check
  # =============================================================================
  validation-complete:
    name: ‚úÖ Validation Complete
    runs-on: ubuntu-latest
    needs:
      - detect-changes
      - validate-bunkbot
      - validate-starbunk-dnd
      - validate-covabot
      - build-bunkbot
      - build-djcova
      - build-starbunk-dnd
      - build-covabot
    if: always()

    steps:
      - name: Check all validation results
        run: |
          echo "üîç Checking validation results..."

          should_skip="${{ needs.detect-changes.outputs.should-skip }}"
          containers_summary="${{ needs.detect-changes.outputs.containers-summary }}"

          echo "Should skip: $should_skip"
          echo "Summary: $containers_summary"

          # If skipping (docs-only changes), that's success
          if [[ "$should_skip" == "true" ]]; then
            echo "‚úÖ Validation skipped (documentation-only changes)"
            exit 0
          fi

          # Check validation job results
          validate_bunkbot_result="${{ needs.validate-bunkbot.result }}"
          validate_starbunk_dnd_result="${{ needs.validate-starbunk-dnd.result }}"
          validate_covabot_result="${{ needs.validate-covabot.result }}"

          # Check build job results
          build_bunkbot_result="${{ needs.build-bunkbot.result }}"
          build_djcova_result="${{ needs.build-djcova.result }}"
          build_starbunk_dnd_result="${{ needs.build-starbunk-dnd.result }}"
          build_covabot_result="${{ needs.build-covabot.result }}"

          echo "Validation Results:"
          echo "  BunkBot: $validate_bunkbot_result"
          echo "  Starbunk-DND: $validate_starbunk_dnd_result"
          echo "  CovaBot: $validate_covabot_result"
          echo ""
          echo "Build Results:"
          echo "  BunkBot: $build_bunkbot_result"
          echo "  DJCova: $build_djcova_result"
          echo "  Starbunk-DND: $build_starbunk_dnd_result"
          echo "  CovaBot: $build_covabot_result"

          # Check for failures
          failed_validations=()
          failed_builds=()

          [[ "$validate_bunkbot_result" == "failure" ]] && failed_validations+=("BunkBot")
          [[ "$validate_starbunk_dnd_result" == "failure" ]] && failed_validations+=("Starbunk-DND")
          [[ "$validate_covabot_result" == "failure" ]] && failed_validations+=("CovaBot")

          [[ "$build_bunkbot_result" == "failure" ]] && failed_builds+=("BunkBot")
          [[ "$build_djcova_result" == "failure" ]] && failed_builds+=("DJCova")
          [[ "$build_starbunk_dnd_result" == "failure" ]] && failed_builds+=("Starbunk-DND")
          [[ "$build_covabot_result" == "failure" ]] && failed_builds+=("CovaBot")

          # Report failures if any
          if [ ${#failed_validations[@]} -gt 0 ]; then
            echo "‚ùå Validation failures: $(IFS=', '; echo "${failed_validations[*]}")"
            exit 1
          fi

          if [ ${#failed_builds[@]} -gt 0 ]; then
            echo "‚ùå Build failures: $(IFS=', '; echo "${failed_builds[*]}")"
            exit 1
          fi

          # All good!
          echo "‚úÖ All validations and builds completed successfully"
          echo "üéâ $containers_summary"

      # Add observability and monitoring for production debugging
      - name: Generate validation metrics
        if: always()
        run: |
          echo "üìä Generating validation metrics..."

          # Create metrics for monitoring dashboard
          cat > validation_metrics.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "pr_number": "${{ github.event.pull_request.number }}",
            "sha": "${{ github.sha }}",
            "containers_summary": "${{ needs.detect-changes.outputs.containers-summary }}",
            "validation_results": {
              "bunkbot": "${{ needs.validate-bunkbot.result }}",
              "starbunk_dnd": "${{ needs.validate-starbunk-dnd.result }}",
              "covabot": "${{ needs.validate-covabot.result }}"
            },
            "build_results": {
              "bunkbot": "${{ needs.build-bunkbot.result }}",
              "djcova": "${{ needs.build-djcova.result }}",
              "starbunk_dnd": "${{ needs.build-starbunk-dnd.result }}",
              "covabot": "${{ needs.build-covabot.result }}"
            },
            "should_skip": "${{ needs.detect-changes.outputs.should-skip }}",
            "workflow_run_id": "${{ github.run_id }}",
            "repository": "${{ github.repository }}"
          }
          EOF

          echo "Validation metrics:"
          cat validation_metrics.json

      - name: Post PR summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = '${{ needs.detect-changes.outputs.containers-summary }}';
            const shouldSkip = '${{ needs.detect-changes.outputs.should-skip }}';

            let body = '## üöÄ Selective Validation Summary\\n\\n';

            if (shouldSkip === 'true') {
              body += 'üìö **Documentation-only changes** - validation skipped\\n';
            } else {
              body += `‚úÖ **Validation completed successfully**\\n\\n`;
              body += `üìã **Summary:** ${summary}\\n\\n`;

              // Add container-specific details
              const validationResults = {
                bunkbot: '${{ needs.validate-bunkbot.result }}',
                'starbunk-dnd': '${{ needs.validate-starbunk-dnd.result }}',
                covabot: '${{ needs.validate-covabot.result }}'
              };

              const buildResults = {
                bunkbot: '${{ needs.build-bunkbot.result }}',
                djcova: '${{ needs.build-djcova.result }}',
                'starbunk-dnd': '${{ needs.build-starbunk-dnd.result }}',
                covabot: '${{ needs.build-covabot.result }}'
              };

              body += '### üì¶ Container Status\\n\\n';

              Object.entries(validationResults).forEach(([container, result]) => {
                if (result && result !== 'skipped') {
                  const icon = result === 'success' ? '‚úÖ' : result === 'failure' ? '‚ùå' : '‚è≠Ô∏è';
                  body += `- ${icon} **${container}**: build ‚Üí test ‚Üí lint (${result})\\n`;
                }
              });

              // Special note for djcova
              if (buildResults.djcova && buildResults.djcova !== 'skipped') {
                const icon = buildResults.djcova === 'success' ? '‚úÖ' : buildResults.djcova === 'failure' ? '‚ùå' : '‚è≠Ô∏è';
                body += `- ${icon} **djcova**: Docker build only (validation skipped)\\n`;
              }

              body += '\\n*Note: DJCova validation is intentionally skipped but Docker images are still built*\\n';
            }

            // Find and update existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('Selective Validation Summary') &&
              comment.user.login === 'github-actions[bot]'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }