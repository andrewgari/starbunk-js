name: PR Checks

on:
    pull_request:
        types: [opened, synchronize, reopened]
        paths-ignore:
            - '**.md'
            - '.github/ISSUE_TEMPLATE/**'
            - 'docs/**'

jobs:
    # Initial check to determine what files changed
    changes:
        name: '🔍 PR - Detect Container Changes'
        runs-on: ubuntu-latest
        outputs:
            shared: ${{ steps.filter.outputs.shared }}
            bunkbot: ${{ steps.filter.outputs.bunkbot }}
            djcova: ${{ steps.filter.outputs.djcova }}
            starbunk-dnd: ${{ steps.filter.outputs.starbunk-dnd }}
            covabot: ${{ steps.filter.outputs.covabot }}
            root-files: ${{ steps.filter.outputs.root-files }}
            workflows: ${{ steps.filter.outputs.workflows }}
            docker: ${{ steps.filter.outputs.docker }}
            # Legacy outputs for backward compatibility
            src: ${{ steps.filter.outputs.containers }}
            tests: ${{ steps.filter.outputs.containers }}
            # Dynamic matrix outputs
            containers-matrix: ${{ steps.set-matrix.outputs.containers }}
            any-container-changed: ${{ steps.set-matrix.outputs.any-changed }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Needed for file change detection

            - name: Check for file changes
              uses: dorny/paths-filter@v2
              id: filter
              with:
                  filters: |
                      shared:
                          - 'containers/shared/**'
                      bunkbot:
                          - 'containers/bunkbot/**'
                      djcova:
                          - 'containers/djcova/**'
                      starbunk-dnd:
                          - 'containers/starbunk-dnd/**'
                      covabot:
                          - 'containers/covabot/**'
                      containers:
                          - 'containers/**'
                      root-files:
                          - 'package.json'
                          - 'package-lock.json'
                          - 'tsconfig.json'
                          - '.eslintrc.json'
                          - 'jest.config.js'
                      workflows:
                          - '.github/workflows/**'
                      docker:
                          - 'Dockerfile*'
                          - '.dockerignore'
                          - 'docker-compose*.yml'

            - name: Set dynamic matrix and flags
              id: set-matrix
              run: |
                # Initialize arrays
                containers=()

                # Check if shared changed (affects all containers)
                if [[ "${{ steps.filter.outputs.shared }}" == "true" || "${{ steps.filter.outputs.root-files }}" == "true" || "${{ steps.filter.outputs.workflows }}" == "true" ]]; then
                  echo "Shared files or critical files changed - checking all containers"
                  containers=("bunkbot" "djcova" "starbunk-dnd" "covabot")
                else
                  # Only check containers that have changed
                  if [[ "${{ steps.filter.outputs.bunkbot }}" == "true" ]]; then
                    containers+=("bunkbot")
                  fi
                  if [[ "${{ steps.filter.outputs.djcova }}" == "true" ]]; then
                    containers+=("djcova")
                  fi
                  if [[ "${{ steps.filter.outputs.starbunk-dnd }}" == "true" ]]; then
                    containers+=("starbunk-dnd")
                  fi
                  if [[ "${{ steps.filter.outputs.covabot }}" == "true" ]]; then
                    containers+=("covabot")
                  fi
                fi

                # Convert array to JSON for matrix
                if [ ${#containers[@]} -eq 0 ]; then
                  echo "containers=[]" >> $GITHUB_OUTPUT
                  echo "any-changed=false" >> $GITHUB_OUTPUT
                  echo "No containers need checking"
                else
                  containers_json=$(printf '%s\n' "${containers[@]}" | jq -R . | jq -s -c .)
                  echo "containers=$containers_json" >> $GITHUB_OUTPUT
                  echo "any-changed=true" >> $GITHUB_OUTPUT
                  echo "Containers to check: ${containers[*]}"
                fi

    lint:
        name: '🔍 PR - Run ESLint Code Quality Checks'
        runs-on: ubuntu-latest
        needs: [changes]
        # Run lint if any container files changed
        if: ${{ needs.changes.outputs.any-container-changed == 'true' }}
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install Dependencies
              run: npm ci

            - name: Install Container Dependencies
              run: npm run setup:containers

            - name: Build Shared Package
              run: |
                echo "Building shared package..."
                cd containers/shared
                npm run build
                echo "✅ Shared package build completed successfully"

            - name: Run Lint
              run: npm run lint

    type-check:
        name: '🔍 PR - Verify TypeScript Types'
        runs-on: ubuntu-latest
        needs: [changes]
        # Run type check if any container files changed
        if: ${{ needs.changes.outputs.any-container-changed == 'true' }}
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install Dependencies
              run: npm ci

            - name: Install Container Dependencies
              run: npm run setup:containers

            - name: Build Shared Package
              run: |
                echo "Building shared package..."
                cd containers/shared
                npm run build
                echo "✅ Shared package build completed successfully"

            - name: Type Check Code
              run: npm run type-check

    build:
        name: '🔨 PR - Build TypeScript Project'
        runs-on: ubuntu-latest
        needs: [changes, lint, type-check]
        # Only run build if container files changed and lint/type-check passed
        if: |
            ${{
              needs.changes.outputs.any-container-changed == 'true' &&
              (needs.lint.result == 'success' || needs.lint.result == 'skipped') &&
              (needs.type-check.result == 'success' || needs.type-check.result == 'skipped')
            }}
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install Dependencies
              run: npm ci

            - name: Install Container Dependencies
              run: npm run setup:containers

            - name: Build Shared Package
              run: |
                echo "Building shared package..."
                cd containers/shared
                npm run build
                echo "✅ Shared package build completed successfully"

            - name: Build App
              run: npm run build

            - name: Upload Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts
                  path: containers/*/dist/
                  if-no-files-found: warn

    unit-test:
        name: '🧪 PR - Run Jest Unit Tests'
        runs-on: ubuntu-latest
        needs: [changes, build]
        # Run unit tests if container files changed and build succeeded
        if: |
            ${{
              needs.changes.outputs.any-container-changed == 'true' &&
              (needs.build.result == 'success' || needs.build.result == 'skipped')
            }}
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install Dependencies
              run: npm ci

            - name: Install Container Dependencies
              run: npm run setup:containers

            - name: Build Shared Package
              run: |
                echo "Building shared package..."
                cd containers/shared
                npm run build
                echo "✅ Shared package build completed successfully"

            - name: Download Build Artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts
                  path: containers/
              if: ${{ needs.changes.outputs.any-container-changed == 'true' }}
              continue-on-error: true

            - name: Run Unit Tests
              run: npm run test

    # Docker build validation is now handled by docker-publish.yml workflow
    # This eliminates redundant image builds - the snapshot creation serves as both validation and publishing
    # The docker-publish.yml workflow will only run after all PR checks pass, ensuring build validation
