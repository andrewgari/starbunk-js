# BunkBot Container - Reply bots and admin commands
# Podman-compatible optimized multi-stage build with Alpine Linux

# Stage 1: Dependencies - Install production dependencies
FROM node:20-alpine AS dependencies

WORKDIR /app

# Install system dependencies needed for native modules
RUN apk add --no-cache python3 make g++ openssl

# Copy package files for dependency installation
COPY packages/shared/package.json packages/shared/package-lock.json ./shared/
COPY apps/bunkbot/package.json apps/bunkbot/package-lock.json ./

# Install shared dependencies and clean up
RUN cd shared && npm ci --only=production && npm cache clean --force

# Install container dependencies and clean up
RUN npm ci --only=production && npm cache clean --force

# Stage 2: Builder - Build the application
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++ openssl

# Copy package files
COPY packages/shared/package.json packages/shared/package-lock.json ./shared/
COPY apps/bunkbot/package.json apps/bunkbot/package-lock.json ./

# Install shared dependencies (including dev)
RUN cd shared && npm ci && npm cache clean --force

# Install container dependencies (including dev)
RUN npm ci && npm cache clean --force

# Copy source code
COPY packages/shared ./shared
COPY apps/bunkbot ./
COPY prisma ./prisma

# Build shared package and container
RUN cd shared && npm run build && SHARED_TGZ=$(npm pack | tail -n1) && \
    cd .. && npm install "./shared/${SHARED_TGZ}" && \
    npx prisma generate && \
    npm run build

# Stage 3: Runtime - Minimal production image
FROM node:20-alpine AS runtime

WORKDIR /app

# Install only runtime system dependencies
RUN apk add --no-cache openssl dumb-init curl && \
    addgroup -g 1001 -S bunkbot && \
    adduser -S -D -H -u 1001 -h /app -s /sbin/nologin -G bunkbot bunkbot

# Copy production dependencies from builder stage (includes installed shared package)
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/shared/node_modules ./shared/node_modules

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/shared/dist ./shared/dist
COPY --from=builder /app/package.json ./
COPY --from=builder /app/prisma ./prisma

# Generate Prisma client for production
RUN npx prisma generate

# Set ownership and switch to non-root user
RUN chown -R bunkbot:bunkbot /app
USER bunkbot

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

EXPOSE 3000

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]
