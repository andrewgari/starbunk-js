# Main workflow for CI/CD pipeline
# Triggers on:
# - Push to main or develop branches
# - Merged PRs to main or develop branches
name: Main Branch Docker Build

on:
    push:
        branches: [main, develop]
    pull_request:
        types: [closed]
        branches: [main, develop]

# Add explicit permissions for the GITHUB_TOKEN
permissions:
    contents: read
    packages: write

jobs:
    # Builds and publishes Docker image
    # Tags images with:
    # - latest
    # - YYYY.MM.DD-<git-sha>
    docker:
        name: '🐳 Build & Publish Docker Image'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GHCR_PAT }}

            # Option 2: If GITHUB_TOKEN doesn't work, uncomment and use a PAT with packages:write scope
            # - name: Login to GitHub Container Registry with PAT
            #   uses: docker/login-action@v3
            #   with:
            #     registry: ghcr.io
            #     username: ${{ github.actor }}
            #     password: ${{ secrets.PAT }}

            - name: Generate Version Tag
              id: version
              run: |
                  echo "tag=$(date +'%Y.%m.%d')-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

            - name: Build and Push Release Image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: |
                      ghcr.io/${{ github.repository }}:latest
                      ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=min
    
    # Clean up old images, keeping only the 10 most recent tags
    cleanup:
        name: '🧹 Clean Up Old Container Images'
        needs: docker
        runs-on: ubuntu-latest
        steps:
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GHCR_PAT }}
            
            - name: Delete old images
              uses: actions/github-script@v6
              with:
                  github-token: ${{ secrets.GHCR_PAT }}
                  script: |
                      const owner = context.repo.owner;
                      const repo = context.repo.repo;
                      const packageName = `${owner}/${repo}`.toLowerCase();
                      
                      // Get all package versions
                      const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                        package_type: 'container',
                        package_name: packageName,
                        org: owner
                      });
                      
                      // Sort by created_at descending (newest first)
                      versions.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                      
                      // Keep 'latest' tag and the 10 most recent tags
                      const tagsToKeep = new Set(['latest']);
                      let versionCount = 0;
                      
                      for (const version of versions) {
                        // Skip the 'latest' tag
                        if (version.metadata.container.tags.includes('latest')) {
                          continue;
                        }
                        
                        // Keep the 10 most recent versions
                        if (versionCount < 10) {
                          version.metadata.container.tags.forEach(tag => tagsToKeep.add(tag));
                          versionCount++;
                        } else {
                          // Delete older versions
                          console.log(`Deleting package version ${version.id}`);
                          try {
                            await github.rest.packages.deletePackageVersionForOrg({
                              package_type: 'container',
                              package_name: packageName,
                              org: owner,
                              package_version_id: version.id
                            });
                            console.log(`Successfully deleted package version ${version.id}`);
                          } catch (error) {
                            console.error(`Error deleting package version ${version.id}: ${error.message}`);
                          }
                        }
                      }
                      
                      console.log(`Kept tags: ${Array.from(tagsToKeep).join(', ')}`);
                      console.log('Cleanup completed successfully');
