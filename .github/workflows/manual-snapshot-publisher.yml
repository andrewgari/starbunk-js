name: 📸 Manual Snapshot Publisher

on:
  workflow_dispatch:
    inputs:
      # Container Selection
      containers:
        description: 'Containers to publish (comma-separated: bunkbot,djcova,starbunk-dnd,covabot)'
        type: string
        required: false
        default: 'bunkbot,djcova,starbunk-dnd,covabot'

      # Tagging Configuration
      tag_strategy:
        description: 'Snapshot tag strategy'
        type: choice
        required: true
        default: 'snapshot-datetime'
        options:
          - 'snapshot-datetime'    # snapshot-20250913-143052
          - 'pr-number'            # pr-123, pr-456-fix
          - 'branch-based'         # feat-auth-system, bugfix-login
          - 'custom'               # User-defined tag
          - 'emergency'            # emergency-datetime (for critical fixes)

      custom_tag:
        description: 'Custom tag name (required if tag_strategy is "custom")'
        type: string
        required: false

      pr_number:
        description: 'PR number (required if tag_strategy is "pr-number")'
        type: string
        required: false

      tag_suffix:
        description: 'Optional tag suffix (e.g., "-hotfix", "-test")'
        type: string
        required: false

      # Build Options
      build_mode:
        description: 'Build mode configuration'
        type: choice
        required: false
        default: 'standard'
        options:
          - 'standard'     # Standard build with all validation
          - 'fast'         # Skip tests for faster builds
          - 'emergency'    # Skip all validation, maximum speed
          - 'rebuild'      # Force rebuild shared package

      debug_mode:
        description: '🐛 Enable verbose debugging output'
        type: boolean
        required: false
        default: false

      # Rollback Support
      create_rollback_info:
        description: '🔄 Generate rollback information file'
        type: boolean
        required: false
        default: true

permissions:
  contents: read
  packages: write
  actions: read
  security-events: write

env:
  REGISTRY: ghcr.io
  REGISTRY_PREFIX: ghcr.io/${{ github.repository_owner }}
  NODE_VERSION: '20'

jobs:
  # =============================================================================
  # INPUT VALIDATION AND PREPARATION
  # =============================================================================
  validate-inputs:
    name: 🔍 Validate Inputs & Generate Configuration
    runs-on: ubuntu-latest
    outputs:
      # Container selection
      containers-matrix: ${{ steps.generate-matrix.outputs.containers-matrix }}
      container-count: ${{ steps.generate-matrix.outputs.container-count }}
      selected-containers: ${{ steps.generate-matrix.outputs.selected-containers }}

      # Tagging configuration
      final-tag: ${{ steps.generate-tag.outputs.final-tag }}
      tag-metadata: ${{ steps.generate-tag.outputs.tag-metadata }}

      # Build configuration
      validation-config: ${{ steps.build-config.outputs.validation-config }}
      emergency-mode: ${{ steps.build-config.outputs.emergency-mode }}

      # Rollback preparation
      rollback-info: ${{ steps.prepare-rollback.outputs.rollback-info }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Validate Container Selection
        id: validate-containers
        run: |
          echo "🔍 Validating container selection..."

          # Parse comma-separated container list
          IFS=',' read -ra SELECTED <<< "${{ inputs.containers }}"
          containers=()

          for container in "${SELECTED[@]}"; do
            container=$(echo "$container" | xargs) # trim whitespace
            case "$container" in
              "bunkbot"|"djcova"|"starbunk-dnd"|"covabot")
                containers+=("$container")
                echo "  ✅ $container selected for publishing"
                ;;
              *)
                echo "⚠️  Warning: Unknown container '$container' ignored"
                ;;
            esac
          done

          selected_count=${#containers[@]}

          if [[ $selected_count -eq 0 ]]; then
            echo "❌ Error: At least one container must be selected for publishing"
            exit 1
          fi

          echo "✅ Selected $selected_count containers for publishing"
          echo "📦 Containers: ${containers[*]}"

      - name: 🎯 Generate Container Matrix
        id: generate-matrix
        run: |
          echo "🎯 Generating deployment matrix..."

          # Parse comma-separated container list
          IFS=',' read -ra containers <<< "${{ inputs.containers }}"

          # Trim whitespace from each container
          for i in "${!containers[@]}"; do
            containers[i]=$(echo "${containers[i]}" | xargs)
          done

          # Generate JSON matrix
          printf -v container_list '%s,' "${containers[@]}"
          container_list=${container_list%,}
          matrix="{\"container\":[$(printf '"%s",' "${containers[@]}" | sed 's/,$//')],\"include\":["

          for container in "${containers[@]}"; do
            case $container in
              "bunkbot")
                matrix="${matrix}{\"container\":\"bunkbot\",\"emoji\":\"📦\",\"description\":\"Reply Bot System\"},"
                ;;
              "djcova")
                matrix="${matrix}{\"container\":\"djcova\",\"emoji\":\"🎵\",\"description\":\"Music Service\"},"
                ;;
              "starbunk-dnd")
                matrix="${matrix}{\"container\":\"starbunk-dnd\",\"emoji\":\"🎲\",\"description\":\"D&D Campaign Manager\"},"
                ;;
              "covabot")
                matrix="${matrix}{\"container\":\"covabot\",\"emoji\":\"🤖\",\"description\":\"AI Personality Bot\"},"
                ;;
            esac
          done

          matrix="${matrix%,}]}"

          echo "containers-matrix=$matrix" >> $GITHUB_OUTPUT
          echo "container-count=${#containers[@]}" >> $GITHUB_OUTPUT
          echo "selected-containers=$container_list" >> $GITHUB_OUTPUT

          echo "📊 Matrix: $matrix"

      - name: 🏷️ Generate Tag Configuration
        id: generate-tag
        run: |
          set -euo pipefail

          echo "🏷️ Generating tag configuration..."

          STRATEGY="${{ inputs.tag_strategy }}"
          SUFFIX="${{ inputs.tag_suffix }}"

          # Get current timestamp in multiple formats
          TIMESTAMP=$(date -u '+%Y%m%d-%H%M%S')
          ISO_TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          BRANCH_NAME="${{ github.ref_name }}"
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA=${SHORT_SHA:0:7}

          case "$STRATEGY" in
            "snapshot-datetime")
              BASE_TAG="snapshot-$TIMESTAMP"
              TAG_TYPE="datetime"
              ;;
            "pr-number")
              PR_NUM="${{ inputs.pr_number }}"
              if [[ -z "$PR_NUM" ]]; then
                echo "❌ Error: PR number is required for pr-number tag strategy"
                exit 1
              fi
              BASE_TAG="pr-$PR_NUM"
              TAG_TYPE="pull-request"
              ;;
            "branch-based")
              CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
              BASE_TAG="$CLEAN_BRANCH-$TIMESTAMP"
              TAG_TYPE="branch"
              ;;
            "custom")
              CUSTOM_TAG="${{ inputs.custom_tag }}"
              if [[ -z "$CUSTOM_TAG" ]]; then
                echo "❌ Error: Custom tag is required for custom tag strategy"
                exit 1
              fi
              BASE_TAG="$CUSTOM_TAG"
              TAG_TYPE="custom"
              ;;
            "emergency")
              BASE_TAG="emergency-$TIMESTAMP"
              TAG_TYPE="emergency"
              ;;
            *)
              echo "❌ Error: Invalid tag strategy: $STRATEGY"
              exit 1
              ;;
          esac

          # Add suffix if provided
          if [[ -n "$SUFFIX" ]]; then
            FINAL_TAG="$BASE_TAG$SUFFIX"
          else
            FINAL_TAG="$BASE_TAG"
          fi

          # Generate metadata
          METADATA="{
            \"tag\": \"$FINAL_TAG\",
            \"base_tag\": \"$BASE_TAG\",
            \"strategy\": \"$STRATEGY\",
            \"type\": \"$TAG_TYPE\",
            \"suffix\": \"$SUFFIX\",
            \"timestamp\": \"$ISO_TIMESTAMP\",
            \"branch\": \"$BRANCH_NAME\",
            \"commit\": \"$SHORT_SHA\",
            \"actor\": \"${{ github.actor }}\"
          }"

          echo "final-tag=$FINAL_TAG" >> $GITHUB_OUTPUT
          echo "tag-metadata=$METADATA" >> $GITHUB_OUTPUT

          echo "🎯 Generated tag: $FINAL_TAG"
          echo "📋 Strategy: $STRATEGY ($TAG_TYPE)"

          if [[ "${{ inputs.debug_mode }}" == "true" ]]; then
            echo "🐛 Debug - Tag metadata: $METADATA"
          fi

      - name: ⚙️ Generate Build Configuration
        id: build-config
        run: |
          echo "⚙️ Generating build configuration..."

          BUILD_MODE="${{ inputs.build_mode }}"

          # Set flags based on build mode
          case "$BUILD_MODE" in
            "emergency")
              SKIP_VALIDATION="true"
              SKIP_TESTS="true"
              EMERGENCY_MODE="true"
              FORCE_REBUILD="false"
              echo "🚨 Emergency mode activated - all validation disabled"
              ;;
            "fast")
              SKIP_VALIDATION="false"
              SKIP_TESTS="true"
              EMERGENCY_MODE="false"
              FORCE_REBUILD="false"
              echo "⚡ Fast mode - skipping tests for faster builds"
              ;;
            "rebuild")
              SKIP_VALIDATION="false"
              SKIP_TESTS="false"
              EMERGENCY_MODE="false"
              FORCE_REBUILD="true"
              echo "🔄 Rebuild mode - forcing shared package rebuild"
              ;;
            "standard"|*)
              SKIP_VALIDATION="false"
              SKIP_TESTS="false"
              EMERGENCY_MODE="false"
              FORCE_REBUILD="false"
              echo "📋 Standard mode - full validation and testing"
              ;;
          esac

          BUILD_CONFIG="{
            \"skip_validation\": $SKIP_VALIDATION,
            \"skip_tests\": $SKIP_TESTS,
            \"emergency_mode\": $EMERGENCY_MODE,
            \"debug_mode\": \"${{ inputs.debug_mode }}\",
            \"force_rebuild_shared\": $FORCE_REBUILD
          }"

          echo "validation-config=$BUILD_CONFIG" >> $GITHUB_OUTPUT
          echo "emergency-mode=$EMERGENCY_MODE" >> $GITHUB_OUTPUT

          echo "📊 Build configuration ($BUILD_MODE mode):"
          echo "  - Skip validation: $SKIP_VALIDATION"
          echo "  - Skip tests: $SKIP_TESTS"
          echo "  - Force rebuild shared: $FORCE_REBUILD"
          echo "  - Emergency mode: $EMERGENCY_MODE"
          echo "  - Debug mode: ${{ inputs.debug_mode }}"

      - name: 🔄 Prepare Rollback Information
        id: prepare-rollback
        if: inputs.create_rollback_info
        run: |
          set -euo pipefail

          echo "🔄 Preparing rollback information..."

          rollback_info="{\"timestamp\": \"$(date -u '+%Y-%m-%dT%H:%M:%SZ')\"}"

          containers=(${{ steps.generate-matrix.outputs.selected-containers }})

          for container in "${containers[@]}"; do
            echo "🔍 Checking current version of $container..."

            # Try to get current latest tag digest
            current_digest=$(docker manifest inspect ${{ env.REGISTRY_PREFIX }}/${container}:latest 2>/dev/null | jq -r '.config.digest' || echo "unknown")

            # Try to get current snapshot tags
            snapshot_tags=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${container}/versions" | \
              jq -r '.[] | select(.metadata.container.tags[] | contains("snapshot")) | .metadata.container.tags[0]' | \
              head -3 || echo "")

            rollback_info=$(echo "$rollback_info" | jq --arg container "$container" \
              --arg digest "$current_digest" \
              --arg snapshots "$snapshot_tags" \
              '.[$container] = {
                "current_latest_digest": $digest,
                "recent_snapshots": ($snapshots | split("\n") | map(select(length > 0))),
                "rollback_command": "docker pull \(${{ env.REGISTRY_PREFIX }})/${container}:latest"
              }')
          done

          echo "rollback-info=$rollback_info" >> $GITHUB_OUTPUT

          if [[ "${{ inputs.debug_mode }}" == "true" ]]; then
            echo "🐛 Debug - Rollback info: $rollback_info"
          fi

  # =============================================================================
  # PRE-BUILD VALIDATION SUITE
  # =============================================================================
  validate-codebase:
    name: ✅ Pre-Build Validation
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: fromJSON(needs.validate-inputs.outputs.validation-config).skip_validation != true
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js with Caching
        uses: ./.github/actions/setup-node-cached
        with:
          node-version: ${{ env.NODE_VERSION }}
          build-shared: ${{ fromJSON(needs.validate-inputs.outputs.validation-config).force_rebuild_shared }}

      - name: 🔍 TypeScript Type Checking
        if: fromJSON(needs.validate-inputs.outputs.validation-config).emergency_mode != true
        run: |
          echo "🔍 Running TypeScript type checks..."
          npm run type-check
          echo "✅ Type checking passed"

      - name: 🎨 Code Linting
        if: fromJSON(needs.validate-inputs.outputs.validation-config).emergency_mode != true
        run: |
          echo "🎨 Running ESLint..."
          npm run lint
          echo "✅ Linting passed"

      - name: 🧪 Test Suite
        if: fromJSON(needs.validate-inputs.outputs.validation-config).skip_tests != true
        run: |
          echo "🧪 Running test suite..."
          npm run test:full
          echo "✅ Tests passed"

      - name: 🏗️ Build Verification
        run: |
          echo "🏗️ Verifying container builds..."

          # Build only selected containers to save time
          containers=(${{ needs.validate-inputs.outputs.selected-containers }})

          for container in "${containers[@]}"; do
            echo "🔨 Building $container..."
            cd "apps/$container"

            if npm run build --if-present; then
              echo "✅ $container build successful"
            else
              echo "❌ $container build failed"
              exit 1
            fi

            cd - > /dev/null
          done

          echo "✅ All selected containers build successfully"

      - name: 📊 Validation Summary
        run: |
          echo "📊 Pre-Build Validation Summary" | tee validation-summary.txt
          echo "===============================" | tee -a validation-summary.txt
          echo "🕐 Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" | tee -a validation-summary.txt
          echo "📦 Containers: ${{ needs.validate-inputs.outputs.selected-containers }}" | tee -a validation-summary.txt
          echo "🏷️ Target tag: ${{ needs.validate-inputs.outputs.final-tag }}" | tee -a validation-summary.txt
          echo "" | tee -a validation-summary.txt
          echo "✅ All validation checks passed successfully!" | tee -a validation-summary.txt

  # =============================================================================
  # SHARED PACKAGE BUILD (DEPENDENCY)
  # =============================================================================
  build-shared:
    name: 🔧 Build Shared Package
    runs-on: ubuntu-latest
    needs: [validate-inputs, validate-codebase]
    if: |
      always() &&
      (needs.validate-codebase.result == 'success' ||
       needs.validate-codebase.result == 'skipped' ||
       fromJSON(needs.validate-inputs.outputs.validation-config).emergency_mode == true)

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js with Caching
        uses: ./.github/actions/setup-node-cached
        with:
          node-version: ${{ env.NODE_VERSION }}
          build-shared: false  # We'll build manually for more control

      - name: 🔧 Build Shared Package
        run: |
          echo "🔧 Building shared package for snapshot publishing..."

          cd packages/shared

          if [[ "${{ inputs.debug_mode }}" == "true" ]]; then
            echo "🐛 Debug - Shared package contents before build:"
            ls -la
          fi

          npm run build

          echo "✅ Shared package built successfully"

          if [[ "${{ inputs.debug_mode }}" == "true" ]]; then
            echo "🐛 Debug - Build artifacts:"
            ls -la dist/
          fi

      - name: 📦 Archive Shared Build
        uses: actions/upload-artifact@v4
        with:
          name: shared-build-${{ needs.validate-inputs.outputs.final-tag }}
          path: packages/shared/dist/
          retention-days: 7

  # =============================================================================
  # SNAPSHOT CONTAINER PUBLISHING
  # =============================================================================
  publish-snapshots:
    name: 📸 Publish ${{ matrix.emoji }} ${{ matrix.container }}
    runs-on: ubuntu-latest
    needs: [validate-inputs, validate-codebase, build-shared]
    if: |
      always() &&
      (needs.validate-codebase.result == 'success' ||
       needs.validate-codebase.result == 'skipped') &&
      needs.build-shared.result == 'success'

    timeout-minutes: 25
    strategy:
      matrix: ${{ fromJSON(needs.validate-inputs.outputs.containers-matrix) }}
      fail-fast: false

    outputs:
      published-images: ${{ steps.publish-summary.outputs.published-images }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Download Shared Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: shared-build-${{ needs.validate-inputs.outputs.final-tag }}
          path: packages/shared/dist/

      - name: 📋 Extract Container Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_PREFIX }}/${{ matrix.container }}
          tags: |
            type=raw,value=${{ needs.validate-inputs.outputs.final-tag }}
          labels: |
            org.opencontainers.image.title=${{ matrix.container }}
            org.opencontainers.image.description=Starbunk Discord Bot - ${{ matrix.description }}
            org.opencontainers.image.vendor=Starbunk
            snapshot.tag=${{ needs.validate-inputs.outputs.final-tag }}
            snapshot.strategy=${{ fromJSON(needs.validate-inputs.outputs.tag-metadata).strategy }}
            snapshot.timestamp=${{ fromJSON(needs.validate-inputs.outputs.tag-metadata).timestamp }}
            snapshot.branch=${{ fromJSON(needs.validate-inputs.outputs.tag-metadata).branch }}
            snapshot.commit=${{ fromJSON(needs.validate-inputs.outputs.tag-metadata).commit }}
            snapshot.actor=${{ fromJSON(needs.validate-inputs.outputs.tag-metadata).actor }}
            snapshot.manual=true
            deployment.run-id=${{ github.run_id }}

      - name: 🏗️ Build and Push Snapshot Image
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: apps/${{ matrix.container }}
          file: apps/${{ matrix.container }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: |
            type=gha,scope=${{ matrix.container }}-snapshot
            type=registry,ref=${{ env.REGISTRY_PREFIX }}/${{ matrix.container }}:latest
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.container }}-snapshot
          provenance: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ needs.validate-inputs.outputs.final-tag }}
            SNAPSHOT_BUILD=true

      - name: 🔍 Verify Published Image
        run: |
          echo "🔍 Verifying published snapshot image..."

          IMAGE_NAME="${{ env.REGISTRY_PREFIX }}/${{ matrix.container }}:${{ needs.validate-inputs.outputs.final-tag }}"

          # Verify image exists and can be pulled
          docker manifest inspect "$IMAGE_NAME"

          # Get image size and layer information
          IMAGE_SIZE=$(docker manifest inspect "$IMAGE_NAME" | jq -r '.config.size')
          LAYER_COUNT=$(docker manifest inspect "$IMAGE_NAME" | jq '.layers | length')

          echo "✅ Image verification successful"
          echo "📦 Image: $IMAGE_NAME"
          echo "📏 Size: $IMAGE_SIZE bytes"
          echo "📚 Layers: $LAYER_COUNT"
          echo "🔖 Digest: ${{ steps.build-push.outputs.digest }}"

      - name: 📊 Publish Summary
        id: publish-summary
        run: |
          IMAGE_URL="${{ env.REGISTRY_PREFIX }}/${{ matrix.container }}:${{ needs.validate-inputs.outputs.final-tag }}"

          SUMMARY="{
            \"container\": \"${{ matrix.container }}\",
            \"emoji\": \"${{ matrix.emoji }}\",
            \"description\": \"${{ matrix.description }}\",
            \"image_url\": \"$IMAGE_URL\",
            \"digest\": \"${{ steps.build-push.outputs.digest }}\",
            \"tag\": \"${{ needs.validate-inputs.outputs.final-tag }}\",
            \"timestamp\": \"$(date -u '+%Y-%m-%dT%H:%M:%SZ')\",
            \"status\": \"success\"
          }"

          echo "published-images=$SUMMARY" >> $GITHUB_OUTPUT

          echo "🎉 Successfully published ${{ matrix.emoji }} ${{ matrix.container }}"
          echo "📦 Image: $IMAGE_URL"
          echo "🔖 Tag: ${{ needs.validate-inputs.outputs.final-tag }}"

  # =============================================================================
  # POST-PUBLISHING VERIFICATION AND REPORTING
  # =============================================================================
  verify-snapshots:
    name: ✅ Verify Published Snapshots
    runs-on: ubuntu-latest
    needs: [validate-inputs, publish-snapshots]
    if: always() && needs.publish-snapshots.result != 'cancelled'
    timeout-minutes: 10

    steps:
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Comprehensive Registry Verification
        run: |
          echo "🔍 Performing comprehensive registry verification..."

          containers=(${{ needs.validate-inputs.outputs.selected-containers }})
          tag="${{ needs.validate-inputs.outputs.final-tag }}"

          all_success=true

          for container in "${containers[@]}"; do
            echo "📦 Verifying $container..."

            image_name="${{ env.REGISTRY_PREFIX }}/${container}:${tag}"

            if docker manifest inspect "$image_name" >/dev/null 2>&1; then
              echo "✅ ${container}:${tag} is available and pullable"

              # Get detailed image information
              manifest_size=$(docker manifest inspect "$image_name" | jq '.config.size')
              created_time=$(docker manifest inspect "$image_name" | jq -r '.config.created // "unknown"')

              echo "  📏 Manifest size: $manifest_size bytes"
              echo "  🕐 Created: $created_time"

              # Verify snapshot labels
              labels=$(docker manifest inspect "$image_name" | jq -r '.config.config.Labels // {}')
              if echo "$labels" | jq -e '.["snapshot.manual"] == "true"' >/dev/null 2>&1; then
                echo "  🏷️ Snapshot labels verified"
              else
                echo "  ⚠️ Snapshot labels missing or incorrect"
              fi

            else
              echo "❌ ${container}:${tag} is NOT available in registry"
              all_success=false
            fi
          done

          if [[ "$all_success" == "true" ]]; then
            echo "🎉 All snapshot images verified successfully!"
          else
            echo "❌ Some snapshot images failed verification"
            exit 1
          fi

      - name: 📊 Generate Snapshot Report
        run: |
          echo "📊 Snapshot Publishing Report" | tee snapshot-report.txt
          echo "============================" | tee -a snapshot-report.txt
          echo "🕐 Published: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" | tee -a snapshot-report.txt
          echo "🏷️ Snapshot Tag: ${{ needs.validate-inputs.outputs.final-tag }}" | tee -a snapshot-report.txt
          echo "📝 Strategy: ${{ fromJSON(needs.validate-inputs.outputs.tag-metadata).strategy }}" | tee -a snapshot-report.txt
          echo "🌿 Branch: ${{ fromJSON(needs.validate-inputs.outputs.tag-metadata).branch }}" | tee -a snapshot-report.txt
          echo "📝 Commit: ${{ fromJSON(needs.validate-inputs.outputs.tag-metadata).commit }}" | tee -a snapshot-report.txt
          echo "👤 Published by: ${{ github.actor }}" | tee -a snapshot-report.txt
          echo "" | tee -a snapshot-report.txt

          echo "📦 Published Containers:" | tee -a snapshot-report.txt
          containers=(${{ needs.validate-inputs.outputs.selected-containers }})
          for container in "${containers[@]}"; do
            image_url="${{ env.REGISTRY_PREFIX }}/${container}:${{ needs.validate-inputs.outputs.final-tag }}"
            echo "  ✅ $container -> $image_url" | tee -a snapshot-report.txt
          done

          echo "" | tee -a snapshot-report.txt
          echo "📋 Build Configuration:" | tee -a snapshot-report.txt
          echo "  - Validation skipped: ${{ fromJSON(needs.validate-inputs.outputs.validation-config).skip_validation }}" | tee -a snapshot-report.txt
          echo "  - Tests skipped: ${{ fromJSON(needs.validate-inputs.outputs.validation-config).skip_tests }}" | tee -a snapshot-report.txt
          echo "  - Emergency mode: ${{ fromJSON(needs.validate-inputs.outputs.validation-config).emergency_mode }}" | tee -a snapshot-report.txt

          if [[ "${{ inputs.create_rollback_info }}" == "true" ]]; then
            echo "" | tee -a snapshot-report.txt
            echo "🔄 Rollback Information Available" | tee -a snapshot-report.txt
            echo "Use the following images to rollback if needed:" | tee -a snapshot-report.txt
            for container in "${containers[@]}"; do
              echo "  docker pull ${{ env.REGISTRY_PREFIX }}/${container}:latest  # Previous version" | tee -a snapshot-report.txt
            done
          fi

      - name: 📤 Upload Snapshot Report
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-report-${{ needs.validate-inputs.outputs.final-tag }}
          path: snapshot-report.txt
          retention-days: 30

  # =============================================================================
  # ROLLBACK INFORMATION GENERATION
  # =============================================================================
  generate-rollback-info:
    name: 🔄 Generate Rollback Information
    runs-on: ubuntu-latest
    needs: [validate-inputs, verify-snapshots]
    if: inputs.create_rollback_info && needs.verify-snapshots.result == 'success'

    steps:
      - name: 🔄 Create Rollback Playbook
        run: |
          echo "🔄 Generating rollback playbook..."

          cat > rollback-playbook.md << 'EOF'
          # 🔄 Snapshot Rollback Playbook

          **Snapshot Tag:** `${{ needs.validate-inputs.outputs.final-tag }}`
          **Published:** `$(date -u '+%Y-%m-%d %H:%M:%S UTC')`
          **Actor:** `${{ github.actor }}`

          ## 📦 Published Images
          EOF

          containers=(${{ needs.validate-inputs.outputs.selected-containers }})
          for container in "${containers[@]}"; do
            cat >> rollback-playbook.md << EOF
          - \`${{ env.REGISTRY_PREFIX }}/${container}:${{ needs.validate-inputs.outputs.final-tag }}\`
          EOF
          done

          cat >> rollback-playbook.md << 'EOF'

          ## 🚨 Emergency Rollback Commands

          If these snapshot images cause issues, use these commands to rollback:

          ### Quick Rollback to Previous Latest
          ```bash
          EOF

          for container in "${containers[@]}"; do
            cat >> rollback-playbook.md << EOF
          docker pull ${{ env.REGISTRY_PREFIX }}/${container}:latest
          # Deploy ${container} with :latest tag
          EOF
          done

          cat >> rollback-playbook.md << 'EOF'
          ```

          ### Manual Image Selection
          Use GitHub Container Registry UI to select specific previous versions:
          https://github.com/orgs/${{ github.repository_owner }}/packages

          ## 🔍 Debugging Information

          - **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Commit:** `${{ github.sha }}`
          - **Branch:** `${{ github.ref_name }}`

          ## 📞 Emergency Contacts

          If rollback is needed, contact:
          - Repository administrators
          - DevOps team
          - On-call engineer
          EOF

          echo "✅ Rollback playbook generated"

      - name: 📤 Upload Rollback Information
        uses: actions/upload-artifact@v4
        with:
          name: rollback-playbook-${{ needs.validate-inputs.outputs.final-tag }}
          path: rollback-playbook.md
          retention-days: 90

  # =============================================================================
  # FINAL STATUS REPORTING
  # =============================================================================
  publish-complete:
    name: 🎉 Snapshot Publishing Complete
    runs-on: ubuntu-latest
    needs: [validate-inputs, validate-codebase, publish-snapshots, verify-snapshots, generate-rollback-info]
    if: always()

    steps:
      - name: 📊 Final Status Summary
        run: |
          echo "🎉 Manual Snapshot Publishing Complete"
          echo "====================================="
          echo ""
          echo "📋 Execution Summary:"
          echo "- Input Validation: ✅ success"
          echo "- Pre-build Validation: ${{ needs.validate-codebase.result || 'skipped' }}"
          echo "- Snapshot Publishing: ${{ needs.publish-snapshots.result }}"
          echo "- Registry Verification: ${{ needs.verify-snapshots.result }}"
          echo "- Rollback Info: ${{ needs.generate-rollback-info.result || 'skipped' }}"
          echo ""
          echo "🏷️ Snapshot Details:"
          echo "- Tag: ${{ needs.validate-inputs.outputs.final-tag }}"
          echo "- Containers: ${{ needs.validate-inputs.outputs.selected-containers }}"
          echo "- Count: ${{ needs.validate-inputs.outputs.container-count }}"
          echo "- Strategy: ${{ fromJSON(needs.validate-inputs.outputs.tag-metadata).strategy }}"
          echo ""

          if [[ "${{ needs.publish-snapshots.result }}" == "success" && "${{ needs.verify-snapshots.result }}" == "success" ]]; then
            echo "🎉 All snapshots published successfully!"
            echo "📦 Images are now available in GitHub Container Registry"
            echo "🔗 Registry URL: https://github.com/orgs/${{ github.repository_owner }}/packages"

            echo ""
            echo "📦 Published Images:"
            containers=(${{ needs.validate-inputs.outputs.selected-containers }})
            for container in "${containers[@]}"; do
              echo "  - ${{ env.REGISTRY_PREFIX }}/${container}:${{ needs.validate-inputs.outputs.final-tag }}"
            done

          elif [[ "${{ needs.publish-snapshots.result }}" == "failure" ]]; then
            echo "❌ Snapshot publishing failed"
            echo "🔍 Check the 'Publish Snapshots' job logs for details"
            echo "🛠️ Common issues:"
            echo "  - Authentication problems with GHCR"
            echo "  - Container build failures"
            echo "  - Network connectivity issues"

          elif [[ "${{ needs.verify-snapshots.result }}" == "failure" ]]; then
            echo "⚠️ Snapshots published but verification failed"
            echo "📦 Images may be available but should be checked manually"
            echo "🔗 Check: https://github.com/orgs/${{ github.repository_owner }}/packages"

          else
            echo "❓ Unexpected state - check individual job results"
          fi

          echo ""
          echo "🔗 Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: 🧹 Cleanup Summary
        run: |
          echo "🧹 Cleanup Information:"
          echo "- Build artifacts will be auto-cleaned by GitHub Actions"
          echo "- Snapshot report and rollback info retained for 30-90 days"
          echo "- Container images stored indefinitely in GHCR (subject to retention policies)"
          echo "✅ Manual snapshot publishing workflow complete"