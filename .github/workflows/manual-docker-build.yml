name: Manual Docker Build and Push

on:
  workflow_dispatch:
    inputs:
      containers:
        description: 'Containers to build (comma-separated: bunkbot,djcova,starbunk-dnd,covabot or "all")'
        required: true
        default: 'all'
        type: string
      tag_prefix:
        description: 'Tag prefix (dev, test, release, custom)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - release
          - custom
      custom_tag:
        description: 'Custom tag (only used if tag_prefix is "custom")'
        required: false
        type: string
      push_to_registry:
        description: 'Push images to registry'
        required: false
        type: boolean
        default: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      containers: ${{ steps.parse.outputs.containers }}
      tag: ${{ steps.tag.outputs.tag }}
      bunkbot: ${{ steps.parse.outputs.bunkbot }}
      djcova: ${{ steps.parse.outputs.djcova }}
      starbunk-dnd: ${{ steps.parse.outputs.starbunk-dnd }}
      covabot: ${{ steps.parse.outputs.covabot }}
    steps:
      - name: Parse container selection
        id: parse
        run: |
          CONTAINERS="${{ inputs.containers }}"
          
          # Normalize input
          if [ "$CONTAINERS" = "all" ]; then
            CONTAINERS="bunkbot,djcova,starbunk-dnd,covabot"
          fi
          
          echo "containers=$CONTAINERS" >> $GITHUB_OUTPUT
          
          # Set individual container flags
          if echo "$CONTAINERS" | grep -q "bunkbot"; then
            echo "bunkbot=true" >> $GITHUB_OUTPUT
          else
            echo "bunkbot=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CONTAINERS" | grep -q "djcova"; then
            echo "djcova=true" >> $GITHUB_OUTPUT
          else
            echo "djcova=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CONTAINERS" | grep -q "starbunk-dnd"; then
            echo "starbunk-dnd=true" >> $GITHUB_OUTPUT
          else
            echo "starbunk-dnd=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CONTAINERS" | grep -q "covabot"; then
            echo "covabot=true" >> $GITHUB_OUTPUT
          else
            echo "covabot=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate tag
        id: tag
        run: |
          TAG_PREFIX="${{ inputs.tag_prefix }}"
          BRANCH_NAME="${{ github.ref_name }}"
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA=${SHORT_SHA:0:7}
          
          case "$TAG_PREFIX" in
            "dev")
              # Clean branch name for tag (replace / with -)
              CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/\//-/g')
              TAG="dev-$CLEAN_BRANCH"
              ;;
            "test")
              TAG="test-$SHORT_SHA"
              ;;
            "release")
              TAG="latest"
              ;;
            "custom")
              TAG="${{ inputs.custom_tag }}"
              if [ -z "$TAG" ]; then
                echo "Error: Custom tag cannot be empty when tag_prefix is 'custom'"
                exit 1
              fi
              ;;
            *)
              echo "Error: Invalid tag_prefix: $TAG_PREFIX"
              exit 1
              ;;
          esac
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"

  build-bunkbot:
    needs: prepare
    if: needs.prepare.outputs.bunkbot == 'true'
    uses: ./.github/workflows/docker-build-reusable.yml
    with:
      container_name: bunkbot
      image_tag: ${{ needs.prepare.outputs.tag }}
      push_image: ${{ inputs.push_to_registry }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-djcova:
    needs: prepare
    if: needs.prepare.outputs.djcova == 'true'
    uses: ./.github/workflows/docker-build-reusable.yml
    with:
      container_name: djcova
      image_tag: ${{ needs.prepare.outputs.tag }}
      push_image: ${{ inputs.push_to_registry }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-starbunk-dnd:
    needs: prepare
    if: needs.prepare.outputs.starbunk-dnd == 'true'
    uses: ./.github/workflows/docker-build-reusable.yml
    with:
      container_name: starbunk-dnd
      image_tag: ${{ needs.prepare.outputs.tag }}
      push_image: ${{ inputs.push_to_registry }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-covabot:
    needs: prepare
    if: needs.prepare.outputs.covabot == 'true'
    uses: ./.github/workflows/docker-build-reusable.yml
    with:
      container_name: covabot
      image_tag: ${{ needs.prepare.outputs.tag }}
      push_image: ${{ inputs.push_to_registry }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    runs-on: ubuntu-latest
    needs: [prepare, build-bunkbot, build-djcova, build-starbunk-dnd, build-covabot]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Manual Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ needs.prepare.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Containers:** ${{ needs.prepare.outputs.containers }}" >> $GITHUB_STEP_SUMMARY
          echo "**Pushed to Registry:** ${{ inputs.push_to_registry }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Container | Built | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| bunkbot | ${{ needs.prepare.outputs.bunkbot }} | ${{ needs.build-bunkbot.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| djcova | ${{ needs.prepare.outputs.djcova }} | ${{ needs.build-djcova.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| starbunk-dnd | ${{ needs.prepare.outputs.starbunk-dnd }} | ${{ needs.build-starbunk-dnd.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| covabot | ${{ needs.prepare.outputs.covabot }} | ${{ needs.build-covabot.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.push_to_registry }}" = "true" ]; then
            echo "### Published Images" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.prepare.outputs.bunkbot }}" = "true" ]; then
              echo "- \`ghcr.io/${{ github.repository_owner }}/bunkbot:${{ needs.prepare.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ needs.prepare.outputs.djcova }}" = "true" ]; then
              echo "- \`ghcr.io/${{ github.repository_owner }}/djcova:${{ needs.prepare.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ needs.prepare.outputs.starbunk-dnd }}" = "true" ]; then
              echo "- \`ghcr.io/${{ github.repository_owner }}/starbunk-dnd:${{ needs.prepare.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ needs.prepare.outputs.covabot }}" = "true" ]; then
              echo "- \`ghcr.io/${{ github.repository_owner }}/covabot:${{ needs.prepare.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi
