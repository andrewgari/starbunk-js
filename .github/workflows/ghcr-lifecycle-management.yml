name: GHCR Image Lifecycle Management

# Comprehensive GHCR image lifecycle management system with safety mechanisms,
# intelligent retention policies, and comprehensive monitoring capabilities.

on:
  # Scheduled cleanup operations
  schedule:
    # Daily PR image cleanup at 2 AM UTC
    - cron: '0 2 * * *'
    # Weekly full cleanup at 3 AM UTC on Sundays
    - cron: '0 3 * * 0'

  # Triggered after successful merges to main
  workflow_run:
    workflows:
      - "PR Validation"
      - "Publish on Main"
    types: [completed]
    branches: [main]

  # Manual operation triggers
  workflow_dispatch:
    inputs:
      operation_type:
        description: 'Type of operation to perform'
        required: true
        default: 'pr_cleanup'
        type: choice
        options:
          - 'pr_cleanup'      # Clean up old PR images
          - 'full_cleanup'    # Full registry cleanup
          - 'validate'        # Validate configuration and system health
          - 'report'          # Generate detailed reports only
          - 'emergency'       # Emergency cleanup with extended limits

      dry_run:
        description: 'Dry run mode (recommended for testing)'
        required: false
        default: true
        type: boolean

      containers:
        description: 'Containers to process (comma-separated, or "all")'
        required: false
        default: 'all'
        type: string

      max_deletions:
        description: 'Maximum number of deletions (safety limit)'
        required: false
        default: '50'
        type: string

      force_operation:
        description: 'Force operation even with safety warnings'
        required: false
        default: false
        type: boolean

env:
  CONFIG_FILE: '.github/ghcr-cleanup-config.yml'
  UTILS_SCRIPT: '.github/scripts/ghcr-cleanup-utils.js'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Configuration validation and setup
  setup-and-validate:
    name: üîç Setup and Validation
    runs-on: ubuntu-latest
    outputs:
      config_valid: ${{ steps.validate.outputs.config_valid }}
      operation_type: ${{ steps.determine-operation.outputs.operation_type }}
      dry_run: ${{ steps.determine-operation.outputs.dry_run }}
      containers: ${{ steps.determine-operation.outputs.containers }}
      max_deletions: ${{ steps.determine-operation.outputs.max_deletions }}
      emergency_stop: ${{ steps.validate.outputs.emergency_stop }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Determine operation parameters
        id: determine-operation
        run: |
          # Determine operation type based on trigger
          if [ "${{ github.event_name }}" = "schedule" ]; then
            if [ "${{ github.event.schedule }}" = "0 2 * * *" ]; then
              OPERATION_TYPE="pr_cleanup"
            elif [ "${{ github.event.schedule }}" = "0 3 * * 0" ]; then
              OPERATION_TYPE="full_cleanup"
            fi
            DRY_RUN=false
          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            OPERATION_TYPE="pr_cleanup"
            DRY_RUN=false
          else
            OPERATION_TYPE="${{ github.event.inputs.operation_type || 'pr_cleanup' }}"
            DRY_RUN="${{ github.event.inputs.dry_run || 'true' }}"
          fi

          CONTAINERS="${{ github.event.inputs.containers || 'all' }}"
          MAX_DELETIONS="${{ github.event.inputs.max_deletions || '50' }}"

          echo "operation_type=$OPERATION_TYPE" >> $GITHUB_OUTPUT
          echo "dry_run=$DRY_RUN" >> $GITHUB_OUTPUT
          echo "containers=$CONTAINERS" >> $GITHUB_OUTPUT
          echo "max_deletions=$MAX_DELETIONS" >> $GITHUB_OUTPUT

          echo "üîß Operation: $OPERATION_TYPE"
          echo "üîç Dry Run: $DRY_RUN"
          echo "üì¶ Containers: $CONTAINERS"
          echo "üîí Max Deletions: $MAX_DELETIONS"

      - name: Validate configuration and system
        id: validate
        run: |
          echo "üîç Validating GHCR lifecycle management configuration..."

          # Check if configuration file exists
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "‚ùå Configuration file not found: $CONFIG_FILE"
            exit 1
          fi

          # Check if utilities script exists
          if [ ! -f "$UTILS_SCRIPT" ]; then
            echo "‚ùå Utilities script not found: $UTILS_SCRIPT"
            exit 1
          fi

          # Validate YAML syntax (if python/yq available)
          if command -v python3 >/dev/null 2>&1; then
            if python3 -c "import yaml; yaml.safe_load(open('$CONFIG_FILE'))" 2>/dev/null; then
              echo "‚úÖ Configuration YAML syntax is valid"
            else
              echo "‚ùå Invalid YAML syntax in configuration file"
              exit 1
            fi
          fi

          # Check for emergency stop
          EMERGENCY_STOP=$(grep -A5 "advanced:" "$CONFIG_FILE" | grep "emergency_stop:" | awk '{print $2}' || echo "false")

          if [ "$EMERGENCY_STOP" = "true" ]; then
            echo "üö® EMERGENCY STOP ACTIVATED - All cleanup operations disabled"
            echo "emergency_stop=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "emergency_stop=false" >> $GITHUB_OUTPUT
          fi

          echo "config_valid=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Configuration validation complete"

  # PR image cleanup
  pr-cleanup:
    name: üßπ PR Image Cleanup
    runs-on: ubuntu-latest
    needs: setup-and-validate
    if: |
      needs.setup-and-validate.outputs.config_valid == 'true' &&
      needs.setup-and-validate.outputs.emergency_stop == 'false' &&
      (needs.setup-and-validate.outputs.operation_type == 'pr_cleanup' ||
       needs.setup-and-validate.outputs.operation_type == 'full_cleanup')

    permissions:
      packages: write
      contents: read
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Load cleanup utilities
        id: load-utils
        run: |
          echo "Loading GHCR cleanup utilities..."
          # Make utilities available to subsequent steps
          cp "$UTILS_SCRIPT" ./ghcr-utils.js

      - name: Execute PR cleanup
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            // Load utilities
            const ghcrUtils = require('./ghcr-utils.js');

            // Load configuration
            const configYaml = fs.readFileSync('${{ env.CONFIG_FILE }}', 'utf8');
            const config = yaml.load(configYaml);

            // Operation parameters
            const operationType = '${{ needs.setup-and-validate.outputs.operation_type }}';
            const dryRun = '${{ needs.setup-and-validate.outputs.dry_run }}' === 'true';
            const maxDeletions = parseInt('${{ needs.setup-and-validate.outputs.max_deletions }}');
            const forceOperation = '${{ github.event.inputs.force_operation }}' === 'true';

            console.log(`üöÄ Starting ${operationType} operation`);
            console.log(`üîç Dry run: ${dryRun}`);
            console.log(`üîí Max deletions: ${maxDeletions}`);

            // Initialize utilities with configuration
            await ghcrUtils.initialize(github, context, config);

            // Execute PR cleanup
            const results = await ghcrUtils.cleanupPRImages({
              dryRun,
              maxDeletions,
              forceOperation
            });

            // Generate summary
            const summary = ghcrUtils.generateSummary(results, operationType);
            console.log('\n' + summary);

            // Create job summary
            await core.summary
              .addHeading('üßπ GHCR PR Image Cleanup Results')
              .addRaw(summary)
              .write();

  # Full registry cleanup
  full-cleanup:
    name: üßΩ Full Registry Cleanup
    runs-on: ubuntu-latest
    needs: setup-and-validate
    if: |
      needs.setup-and-validate.outputs.config_valid == 'true' &&
      needs.setup-and-validate.outputs.emergency_stop == 'false' &&
      needs.setup-and-validate.outputs.operation_type == 'full_cleanup'

    permissions:
      packages: write
      contents: read
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Execute full cleanup
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            // Load utilities
            const ghcrUtils = require('./ghcr-utils.js');

            // Load configuration
            const configYaml = fs.readFileSync('${{ env.CONFIG_FILE }}', 'utf8');
            const config = yaml.load(configYaml);

            // Operation parameters
            const dryRun = '${{ needs.setup-and-validate.outputs.dry_run }}' === 'true';
            const maxDeletions = parseInt('${{ needs.setup-and-validate.outputs.max_deletions }}');

            console.log('üöÄ Starting full registry cleanup');
            console.log(`üîç Dry run: ${dryRun}`);

            // Initialize utilities
            await ghcrUtils.initialize(github, context, config);

            // Execute full cleanup (PR images + untagged + old images)
            const results = await ghcrUtils.fullCleanup({
              dryRun,
              maxDeletions
            });

            // Generate summary
            const summary = ghcrUtils.generateSummary(results, 'full_cleanup');
            console.log('\n' + summary);

            // Create job summary
            await core.summary
              .addHeading('üßΩ GHCR Full Registry Cleanup Results')
              .addRaw(summary)
              .write();

  # System validation and health check
  validate-and-report:
    name: üìä Validation and Reporting
    runs-on: ubuntu-latest
    needs: setup-and-validate
    if: |
      needs.setup-and-validate.outputs.config_valid == 'true' &&
      (needs.setup-and-validate.outputs.operation_type == 'validate' ||
       needs.setup-and-validate.outputs.operation_type == 'report')

    permissions:
      packages: read
      contents: read
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Generate health report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            // Load utilities
            const ghcrUtils = require('./ghcr-utils.js');

            // Load configuration
            const configYaml = fs.readFileSync('${{ env.CONFIG_FILE }}', 'utf8');
            const config = yaml.load(configYaml);

            console.log('üìä Generating GHCR health and validation report');

            // Initialize utilities
            await ghcrUtils.initialize(github, context, config);

            // Generate health report
            const healthReport = await ghcrUtils.generateHealthReport();

            // Validate configuration
            const validationResults = await ghcrUtils.validateConfiguration();

            // Create comprehensive report
            const report = ghcrUtils.formatHealthReport(healthReport, validationResults);
            console.log('\n' + report);

            // Create job summary
            await core.summary
              .addHeading('üìä GHCR System Health and Validation Report')
              .addRaw(report)
              .write();

            // Save report as artifact
            fs.writeFileSync('ghcr-health-report.md', report);

      - name: Upload health report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ghcr-health-report-${{ github.run_id }}
          path: ghcr-health-report.md
          retention-days: 90

  # Emergency cleanup with extended limits
  emergency-cleanup:
    name: üö® Emergency Cleanup
    runs-on: ubuntu-latest
    needs: setup-and-validate
    if: |
      needs.setup-and-validate.outputs.config_valid == 'true' &&
      needs.setup-and-validate.outputs.emergency_stop == 'false' &&
      needs.setup-and-validate.outputs.operation_type == 'emergency'

    permissions:
      packages: write
      contents: read
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Emergency cleanup warning
        run: |
          echo "üö® EMERGENCY CLEANUP INITIATED"
          echo "This operation may delete more images than normal limits allow."
          echo "Proceeding with extended safety parameters..."

      - name: Execute emergency cleanup
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            // Load utilities
            const ghcrUtils = require('./ghcr-utils.js');

            // Load configuration
            const configYaml = fs.readFileSync('${{ env.CONFIG_FILE }}', 'utf8');
            const config = yaml.load(configYaml);

            const dryRun = '${{ needs.setup-and-validate.outputs.dry_run }}' === 'true';
            const maxDeletions = Math.max(parseInt('${{ needs.setup-and-validate.outputs.max_deletions }}'), 200);

            console.log('üö® Starting emergency cleanup with extended limits');
            console.log(`üîç Dry run: ${dryRun}`);
            console.log(`üîí Extended max deletions: ${maxDeletions}`);

            // Initialize utilities
            await ghcrUtils.initialize(github, context, config);

            // Execute emergency cleanup
            const results = await ghcrUtils.emergencyCleanup({
              dryRun,
              maxDeletions
            });

            // Generate summary
            const summary = ghcrUtils.generateSummary(results, 'emergency');
            console.log('\n' + summary);

            // Create job summary
            await core.summary
              .addHeading('üö® GHCR Emergency Cleanup Results')
              .addRaw(summary)
              .write();

  # Final summary and notifications
  summary-and-notifications:
    name: üìã Summary and Notifications
    runs-on: ubuntu-latest
    needs: [setup-and-validate, pr-cleanup, full-cleanup, validate-and-report, emergency-cleanup]
    if: always() && needs.setup-and-validate.outputs.config_valid == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate final summary
        run: |
          echo "## üìã GHCR Lifecycle Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Operation Type:** ${{ needs.setup-and-validate.outputs.operation_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ needs.setup-and-validate.outputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Job results summary
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Setup and Validation: ${{ needs.setup-and-validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- PR Cleanup: ${{ needs.pr-cleanup.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Full Cleanup: ${{ needs.full-cleanup.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Validation/Report: ${{ needs.validate-and-report.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Emergency Cleanup: ${{ needs.emergency-cleanup.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For detailed logs, check individual job outputs above." >> $GITHUB_STEP_SUMMARY

      - name: Notify on failures
        if: failure()
        run: |
          echo "üö® GHCR Lifecycle Management workflow failed"
          echo "Check the logs for detailed error information"
          echo "Consider running in dry-run mode for troubleshooting"