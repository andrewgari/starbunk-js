FROM node:18-alpine

# Install development dependencies with optimized layer caching
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    ffmpeg

WORKDIR /app

# Copy package files first to leverage Docker cache
COPY package.json package-lock.json ./

# Install dependencies with cache mount
RUN --mount=type=cache,target=/root/.npm \
    npm ci --prefer-offline --no-audit --no-fund

# Add global packages needed for development
RUN npm install -g \
    ts-node \
    is-ci

# Use a volume mount for source code in docker-compose
# This allows for faster development without rebuilding the image

# Set NODE_ENV
ENV NODE_ENV=development

# Default command
CMD ["npm", "run", "dev"]
