# Docker Compose for PR Testing (Snapshot Images)
# ================================================
# This file is designed for testing PR builds using snapshot images.
#
# Containers included: bunkbot, djcova, starbunk-dnd, covabot (4 containers)
# Note: snowbunk is excluded from PR testing - only available in production
#
# Prerequisites:
#   - Ensure .env file exists in the same directory as this compose file
#   - All required environment variables must be defined in .env file
#   - Verify snapshot images are available in GHCR (built during PR workflow)
#
# Usage:
#   docker-compose -f docker-compose.snapshot.yml up -d
#
# Image Format: ghcr.io/andrewgari/{service}:snapshot (hardcoded tags)
# Example: ghcr.io/andrewgari/bunkbot:snapshot

services:
  # PostgreSQL Database - Required for database-driven configuration
  postgres:
    image: postgres:15-alpine
    container_name: starbunk-postgres-snapshot
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-starbunk}
      POSTGRES_USER: ${POSTGRES_USER:-starbunk}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      # Unraid-compatible host path mount for snapshot testing
      - ${UNRAID_APPDATA_PATH:-./data}/postgres-snapshot:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-starbunk} -d ${POSTGRES_DB:-starbunk}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - starbunk-snapshot-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  bunkbot:
    image: ghcr.io/andrewgari/bunkbot:snapshot
    container_name: starbunk-bunkbot-snapshot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
      - CLIENT_ID=${CLIENT_ID}
      - GUILD_ID=${GUILD_ID}
      - WEBHOOK_URL=${WEBHOOK_URL:-}
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-starbunk}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-starbunk}}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_DEFAULT_MODEL=${OPENAI_DEFAULT_MODEL:-gpt-4o-mini}
      - DEBUG_MODE=${DEBUG_MODE:-true}
      - TESTING_SERVER_IDS=${TESTING_SERVER_IDS:-}
      - TESTING_CHANNEL_IDS=${TESTING_CHANNEL_IDS:-}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - starbunk-snapshot-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  djcova:
    image: ghcr.io/andrewgari/djcova:snapshot
    container_name: starbunk-djcova-snapshot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
      - CLIENT_ID=${CLIENT_ID}
      - GUILD_ID=${GUILD_ID}
      - DEBUG_MODE=${DEBUG_MODE:-true}
      - TESTING_SERVER_IDS=${TESTING_SERVER_IDS:-}
      - TESTING_CHANNEL_IDS=${TESTING_CHANNEL_IDS:-}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    volumes:
      # Unraid-compatible host path mounts for snapshot testing
      - ${UNRAID_APPDATA_PATH:-./data}/djcova-snapshot/cache:/app/cache
      - ${UNRAID_APPDATA_PATH:-./data}/djcova-snapshot/temp:/tmp
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'node dist/index.js' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - starbunk-snapshot-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  starbunk-dnd:
    image: ghcr.io/andrewgari/starbunk-dnd:snapshot
    container_name: starbunk-dnd-snapshot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
      - SNOWBUNK_TOKEN=${SNOWBUNK_TOKEN}
      - CLIENT_ID=${CLIENT_ID}
      - GUILD_ID=${GUILD_ID}
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-starbunk}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-starbunk}}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_DEFAULT_MODEL=${OPENAI_DEFAULT_MODEL:-gpt-4o-mini}
      - OLLAMA_API_URL=${OLLAMA_API_URL:-}
      - OLLAMA_DEFAULT_MODEL=${OLLAMA_DEFAULT_MODEL:-}
      - DEBUG_MODE=${DEBUG_MODE:-true}
      - TESTING_SERVER_IDS=${TESTING_SERVER_IDS:-}
      - TESTING_CHANNEL_IDS=${TESTING_CHANNEL_IDS:-}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Unraid-compatible host path mounts for snapshot testing
      - ${UNRAID_APPDATA_PATH:-./data}/starbunk-dnd-snapshot/data:/app/data
      - ${UNRAID_APPDATA_PATH:-./data}/starbunk-dnd-snapshot/campaigns:/app/data/campaigns
      - ${UNRAID_APPDATA_PATH:-./data}/starbunk-dnd-snapshot/context:/app/data/llm_context
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - starbunk-snapshot-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  covabot:
    image: ghcr.io/andrewgari/covabot:snapshot
    container_name: starbunk-covabot-snapshot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
      - CLIENT_ID=${CLIENT_ID}
      - GUILD_ID=${GUILD_ID}
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-starbunk}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-starbunk}}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_DEFAULT_MODEL=${OPENAI_DEFAULT_MODEL:-gpt-4o-mini}
      - DEBUG_MODE=${DEBUG_MODE:-true}
      - TESTING_SERVER_IDS=${TESTING_SERVER_IDS:-}
      - TESTING_CHANNEL_IDS=${TESTING_CHANNEL_IDS:-}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      # CovaBot-specific configuration
      - USE_DATABASE=${USE_DATABASE:-false}
      - COVABOT_DATA_DIR=/app/data
      - COVABOT_API_KEY=${COVABOT_API_KEY:-}
      - QDRANT_URL=${QDRANT_URL:-http://192.168.50.3:6333}
      - USE_QDRANT=${USE_QDRANT:-true}
    volumes:
      # Unraid-compatible host path mount for CovaBot personality notes (snapshot testing)
      - ${UNRAID_APPDATA_PATH:-./data}/covabot-snapshot:/app/data
    ports:
      # Expose web interface for personality management (snapshot testing)
      - "${COVABOT_WEB_PORT:-7080}:7080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - starbunk-snapshot-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

# Note: Using host path mounts for Unraid compatibility
# Snapshot data persists in ${UNRAID_APPDATA_PATH:-./data}/*-snapshot/ directories
# Default fallback to ./data/ for non-Unraid environments

networks:
  starbunk-snapshot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/24
