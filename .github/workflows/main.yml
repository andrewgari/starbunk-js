# Main workflow for CI/CD pipeline
# Triggers on:
# - Push to main or develop branches
# - Merged PRs to main or develop branches
name: Main Branch Checks

on:
    push:
        branches: [main, develop]
    pull_request:
        types: [closed]
        branches: [main, develop]

# Add explicit permissions for the GITHUB_TOKEN
permissions:
    contents: read
    packages: write

jobs:
    # Determines which parts of the codebase have changed and if the workflow should run
    # Outputs:
    # - should_run: true if PR merged or direct push
    # - src: changes to source code
    # - tests: changes to test files
    # - cypress: changes to cypress files
    # - workflows: changes to workflow files
    # - docker: changes to Docker configuration
    changes:
        name: 'üîç Main - Detect File Changes'
        runs-on: ubuntu-latest
        outputs:
            should_run: ${{ steps.check_merged.outputs.should_run }}
            src: ${{ steps.filter.outputs.src }}
            tests: ${{ steps.filter.outputs.tests }}
            cypress: ${{ steps.filter.outputs.cypress }}
            workflows: ${{ steps.filter.outputs.workflows }}
            docker: ${{ steps.filter.outputs.docker }}
        steps:
            - name: Check if PR was merged or direct push
              id: check_merged
              run: |
                  if [[ "${{ github.event_name }}" == "push" || "${{ github.event.pull_request.merged }}" == "true" ]]; then
                    echo "should_run=true" >> $GITHUB_OUTPUT
                  else
                    echo "should_run=false" >> $GITHUB_OUTPUT
                  fi

            - uses: actions/checkout@v4
              if: steps.check_merged.outputs.should_run == 'true'
              with:
                  fetch-depth: 0 # Needed for file change detection

            - name: Check for file changes
              if: steps.check_merged.outputs.should_run == 'true'
              uses: dorny/paths-filter@v2
              id: filter
              with:
                  filters: |
                      src:
                          - 'src/**'
                          - '!src/tests/**'
                          - '!cypress/**'
                      tests:
                          - 'src/tests/**'
                          - '**/*.test.ts'
                          - '**/*.spec.ts'
                          - 'jest.config.js'
                      cypress:
                          - 'cypress/**'
                          - 'cypress.config.ts'
                      workflows:
                          - '.github/workflows/**'
                      docker:
                          - 'Dockerfile*'
                          - '.dockerignore'
                          - 'docker-compose*.yml'

    # Builds the TypeScript project and saves artifacts for later jobs
    build:
        needs: [changes]
        name: 'üî® Main - Build TypeScript Project'
        # Only run if PR was merged or direct push to main/develop AND src files changed
        if: ${{ needs.changes.outputs.should_run == 'true' && needs.changes.outputs.src == 'true' }}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
            - run: npm ci
            - run: npm run build
            - name: Upload Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts
                  path: dist/
                  if-no-files-found: error

    # Runs ESLint to ensure code quality
    lint:
        needs: [changes]
        name: 'üîç Main - Run ESLint Code Quality Checks'
        # Run lint if src or test files changed
        if: ${{ needs.changes.outputs.should_run == 'true' && (needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true') }}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
            - run: npm ci
            - run: npm run lint

    # Verifies TypeScript types are correct
    type-check:
        needs: [changes]
        name: 'üîç Main - Verify TypeScript Types'
        # Run type check if src or test files changed
        if: ${{ needs.changes.outputs.should_run == 'true' && (needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true') }}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
            - run: npm ci
            - run: npm run type-check:main
            - name: Type Check Cypress Code
              if: ${{ needs.changes.outputs.cypress == 'true' }}
              run: npm run type-check:cypress

    # Runs Jest unit tests using the built artifacts
    test:
        needs: [changes, build]
        name: 'üß™ Main - Run Jest Unit Tests'
        # Run unit tests if src or test files changed
        if: ${{ needs.changes.outputs.should_run == 'true' && (needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true') }}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
            - run: npm ci
            - name: Download Build Artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts
                  path: dist/
              if: ${{ needs.changes.outputs.src == 'true' }}
            - run: npm run test

    # Runs Cypress E2E tests for bot functionality
    # Only executes if src or cypress files have changed
    e2e-test:
        needs: [changes, build]
        name: 'ü§ñ Main - Run Cypress E2E Bot Tests'
        if: ${{ needs.changes.outputs.should_run == 'true' && (needs.changes.outputs.src == 'true' || needs.changes.outputs.cypress == 'true') }}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
            - run: npm ci
            - name: Download Build Artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts
                  path: dist/
              if: ${{ needs.changes.outputs.src == 'true' }}
            - name: Create .env file
              run: |
                  echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" > .env
                  echo "NODE_ENV=test" >> .env

            - name: Create cypress.env.json
              run: |
                  echo '{
                    "numTestsKeptInMemory": 5,
                    "requestTimeout": 5000,
                    "responseTimeout": 10000,
                    "defaultCommandTimeout": 5000,
                    "pageLoadTimeout": 10000
                  }' > cypress.env.json

            - name: Clean up any stale Xvfb lock files
              run: |
                  for i in {99..110}; do
                    if [ -f "/tmp/.X${i}-lock" ]; then
                      sudo rm -f "/tmp/.X${i}-lock"
                    fi
                  done

            - name: Run Bot Tests in Parallel
              run: |
                  # Set unique display number
                  DISPLAY_NUM=100

                  # Start Xvfb with unique display
                  Xvfb :${DISPLAY_NUM} -screen 0 1280x720x24 &
                  XVFB_PID=$!

                  # Export display for Cypress
                  export DISPLAY=:${DISPLAY_NUM}

                  # Run tests with optimized settings
                  npm run test:e2e:bots
                  TEST_RESULT=$?

                  # Kill Xvfb
                  kill $XVFB_PID || true

                  # Return test result
                  exit $TEST_RESULT
              env:
                  CYPRESS_DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
                  NODE_ENV: test
                  # Add Cypress-specific environment variables
                  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Test Screenshots
              uses: actions/upload-artifact@v4
              if: failure()
              with:
                  name: cypress-screenshots
                  path: cypress/screenshots
                  if-no-files-found: ignore

    # Builds and publishes Docker image if all checks pass
    # Tags images with:
    # - latest
    # - YYYY.MM.DD-<git-sha>
    docker:
        needs: [changes, test, e2e-test, lint, type-check]
        name: 'üê≥ Main - Build & Publish Docker Image'
        if: |
            ${{
              needs.changes.outputs.should_run == 'true' &&
              (needs.changes.outputs.src == 'true' ||
               needs.changes.outputs.workflows == 'true' ||
               needs.changes.outputs.docker == 'true') &&
              (needs.test.result == 'success' || needs.test.result == 'skipped') &&
              (needs.lint.result == 'success' || needs.lint.result == 'skipped') &&
              (needs.type-check.result == 'success' || needs.type-check.result == 'skipped') &&
              (needs.e2e-test.result == 'success' || needs.e2e-test.result == 'skipped')
            }}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Generate Version Tag
              id: version
              run: |
                  echo "tag=$(date +'%Y.%m.%d')-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

            - name: Build and Push Release Image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: |
                      ghcr.io/${{ github.repository }}/app:latest
                      ghcr.io/${{ github.repository }}/app:${{ steps.version.outputs.tag }}
