# BunkBot Container - Production-Ready Multi-Stage Build
# Optimized for CI/CD pipelines with comprehensive monitoring and safety features

# Stage 1: Dependencies - Separate layer for better caching
FROM node:20-alpine AS dependencies

WORKDIR /app

# Install system dependencies for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    openssl \
    curl \
    && rm -rf /var/cache/apk/*

# Copy package files for dependency installation (better Docker layer caching)
COPY packages/shared/package*.json packages/shared/package-lock.json ./shared/
COPY apps/bunkbot/package*.json apps/bunkbot/package-lock.json ./

# Install dependencies with npm ci for reproducible builds
RUN cd shared && npm ci --only=production --no-audit && \
    cd .. && npm ci --only=production --no-audit

# Stage 2: Builder - Build application
FROM node:20-alpine AS builder

WORKDIR /app

# Copy dependencies from previous stage
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/shared/node_modules ./shared/node_modules

# Copy source code and configuration
COPY packages/shared ./shared
COPY apps/bunkbot ./
COPY prisma ./prisma
COPY tsconfig.json ./

# Build shared package first (dependency for containers)
RUN cd shared && npm run build

# Install shared package locally and generate Prisma client
RUN cd shared && \
    SHARED_TGZ=$(npm pack | tail -n1) && \
    cd .. && \
    npm install "./shared/${SHARED_TGZ}" && \
    npx prisma generate --schema=./prisma/schema.prisma

# Build container application
RUN npm run build

# Verify build output exists
RUN test -f ./dist/index.js || (echo "Build failed - no dist/index.js found" && exit 1)

# Stage 3: Runtime - Production-ready image
FROM node:20-alpine AS runtime

WORKDIR /app

# Install runtime dependencies and create user in one layer
RUN apk add --no-cache \
    openssl \
    dumb-init \
    curl \
    ca-certificates \
    tzdata \
    tini \
    && addgroup -g 1001 -S bunkbot \
    && adduser -S -D -H -u 1001 -h /app -s /sbin/nologin -G bunkbot bunkbot \
    && mkdir -p /app/logs \
    && chown -R bunkbot:bunkbot /app \
    && rm -rf /var/cache/apk/*

# Set production environment
ENV NODE_ENV=production
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false
ENV FORCE_COLOR=0

# Copy production artifacts with correct ownership
COPY --from=builder --chown=bunkbot:bunkbot /app/dist ./dist
COPY --from=builder --chown=bunkbot:bunkbot /app/node_modules ./node_modules
COPY --from=builder --chown=bunkbot:bunkbot /app/shared ./shared
COPY --from=builder --chown=bunkbot:bunkbot /app/package.json ./
COPY --from=builder --chown=bunkbot:bunkbot /app/prisma ./prisma

# Switch to non-root user for security
USER bunkbot

# Production-ready health check with proper timeouts and retries
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# Expose health check port (configurable via environment)
EXPOSE 3001

# Add labels for better container management and monitoring
LABEL maintainer="andrewgari" \
      app.name="bunkbot" \
      app.version="1.0.0" \
      app.description="Starbunk Discord Bot - BunkBot Service" \
      app.vendor="Starbunk" \
      org.opencontainers.image.title="BunkBot" \
      org.opencontainers.image.description="Reply bots and admin commands for Discord" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.vendor="Starbunk" \
      org.opencontainers.image.licenses="ISC"

# Use tini for proper signal handling and zombie reaping
ENTRYPOINT ["/sbin/tini", "--"]

# Default command - can be overridden in deployment
CMD ["node", "dist/index.js"]