name: Build Metrics & Monitoring

on:
  workflow_run:
    workflows: ["Container Build, Test & Publish"]
    types: [completed]
  schedule:
    # Run weekly to analyze build trends
    - cron: '0 8 * * 1'  # Monday at 8 AM UTC
  workflow_dispatch:
    inputs:
      analysis_period:
        description: 'Analysis period in days'
        required: false
        default: '30'
        type: string

jobs:
  analyze-build-performance:
    name: 📊 Analyze Build Performance
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Analyze recent builds
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const analysisDate = new Date();
            const daysBack = parseInt('${{ inputs.analysis_period || "30" }}');
            const sinceDate = new Date(analysisDate.getTime() - (daysBack * 24 * 60 * 60 * 1000));

            console.log(`Analyzing builds from ${sinceDate.toISOString()} to ${analysisDate.toISOString()}`);

            // Get workflow runs for the container build workflow
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner, repo
            });

            let containerWorkflow = workflows.workflows.find(w =>
              w.name === 'Container Build, Test & Publish' ||
              w.name.toLowerCase().includes('container') ||
              w.name.toLowerCase().includes('build')
            );

            if (!containerWorkflow) {
              console.log('Container build workflow not found, checking all workflows...');
              console.log('Available workflows:', workflows.workflows.map(w => w.name));

              // Use the first workflow that looks like a build workflow
              const buildWorkflow = workflows.workflows.find(w =>
                w.name.toLowerCase().includes('build') ||
                w.name.toLowerCase().includes('container') ||
                w.name.toLowerCase().includes('docker')
              );

              if (!buildWorkflow) {
                console.log('No build-related workflows found, skipping analysis');
                return;
              }

              console.log(`Using workflow: ${buildWorkflow.name}`);
              containerWorkflow = buildWorkflow;
            }

            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner, repo,
              workflow_id: containerWorkflow.id,
              created: `>=${sinceDate.toISOString()}`,
              per_page: 100
            });

            console.log(`Found ${runs.workflow_runs.length} workflow runs`);

            // Analyze build metrics
            let totalRuns = 0;
            let successfulRuns = 0;
            let failedRuns = 0;
            let totalDuration = 0;
            let optimizedBuilds = 0;
            let fullBuilds = 0;

            const buildsByTrigger = {};
            const buildsByBranch = {};

            for (const run of runs.workflow_runs) {
              totalRuns++;

              if (run.conclusion === 'success') {
                successfulRuns++;
              } else if (run.conclusion === 'failure') {
                failedRuns++;
              }

              // Calculate duration in minutes
              const duration = (new Date(run.updated_at) - new Date(run.created_at)) / (1000 * 60);
              totalDuration += duration;

              // Track trigger types
              const trigger = run.event;
              buildsByTrigger[trigger] = (buildsByTrigger[trigger] || 0) + 1;

              // Track branches
              const branch = run.head_branch || 'unknown';
              buildsByBranch[branch] = (buildsByBranch[branch] || 0) + 1;

              // Estimate if this was an optimized build (duration < 8 minutes suggests partial build)
              if (duration < 8) {
                optimizedBuilds++;
              } else {
                fullBuilds++;
              }
            }

            const avgDuration = totalRuns > 0 ? (totalDuration / totalRuns).toFixed(1) : 0;
            const successRate = totalRuns > 0 ? ((successfulRuns / totalRuns) * 100).toFixed(1) : 0;
            const optimizationRate = totalRuns > 0 ? ((optimizedBuilds / totalRuns) * 100).toFixed(1) : 0;

            // Generate summary
            const summary = `## 📊 Build Performance Analysis (Last ${daysBack} days)

            ### 🎯 Key Metrics
            - **Total Builds:** ${totalRuns}
            - **Success Rate:** ${successRate}% (${successfulRuns}/${totalRuns})
            - **Average Duration:** ${avgDuration} minutes
            - **Optimization Rate:** ${optimizationRate}% (${optimizedBuilds} optimized vs ${fullBuilds} full builds)

            ### 📈 Build Efficiency
            - **Time Saved:** ~${(fullBuilds * 12 - optimizedBuilds * 4).toFixed(0)} minutes through optimization
            - **Resource Savings:** ~${optimizationRate}% CI/CD resource reduction
            - **Failed Builds:** ${failedRuns} (${((failedRuns / totalRuns) * 100).toFixed(1)}%)

            ### 🔄 Build Triggers
            ${Object.entries(buildsByTrigger).map(([trigger, count]) =>
              `- **${trigger}:** ${count} builds`
            ).join('\n')}

            ### 🌿 Branch Activity
            ${Object.entries(buildsByBranch)
              .sort(([,a], [,b]) => b - a)
              .slice(0, 5)
              .map(([branch, count]) => `- **${branch}:** ${count} builds`)
              .join('\n')}

            ### 💡 Recommendations
            ${optimizationRate < 50 ?
              '- ⚠️ Low optimization rate - consider reviewing path filters' :
              '- ✅ Good optimization rate - path-based builds working well'
            }
            ${successRate < 90 ?
              '- ⚠️ Build reliability could be improved' :
              '- ✅ Excellent build reliability'
            }
            ${avgDuration > 10 ?
              '- ⚠️ Consider further build optimizations' :
              '- ✅ Good build performance'
            }`;

            // Write to step summary
            await core.summary
              .addRaw(summary)
              .write();

            console.log('Build analysis completed');

      - name: Check for build optimization opportunities
        run: |
          echo "🔍 Checking for build optimization opportunities..."

          # Check for large files that might slow builds
          echo "### 📦 Large Files Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          large_files=$(find containers/ -type f -size +1M 2>/dev/null | head -10)
          if [ -n "$large_files" ]; then
            echo "**Large files found (>1MB):**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$large_files" | while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "$size $file" >> $GITHUB_STEP_SUMMARY
            done
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "💡 Consider adding large files to .dockerignore" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No large files found in container directories" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check Docker ignore files
          echo "### 🚫 Docker Ignore Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          containers=("bunkbot" "djcova" "starbunk-dnd" "snowbunk" "covabot")
          for container in "${containers[@]}"; do
            if [ -f "containers/$container/.dockerignore" ]; then
              echo "✅ $container has .dockerignore" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ $container missing .dockerignore" >> $GITHUB_STEP_SUMMARY
            fi
          done

          # Check for root .dockerignore
          if [ -f ".dockerignore" ]; then
            echo "✅ Root .dockerignore exists" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Root .dockerignore missing" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate optimization recommendations
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Build Optimization Checklist" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Current Optimizations ✅" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Path-based conditional builds" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Shared package dependency detection" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Docker layer caching" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Parallel container builds" >> $GITHUB_STEP_SUMMARY
          echo "- [x] PR snapshot management" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Build artifact caching" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Potential Improvements 🔧" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Multi-stage Docker builds for smaller images" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Container image vulnerability scanning" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Build time metrics dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Automated dependency updates" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Cross-platform builds (ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Build failure notifications" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Advanced Optimizations 🚀" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Remote Docker build cache" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Build matrix optimization" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Incremental TypeScript builds" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Container registry mirroring" >> $GITHUB_STEP_SUMMARY
