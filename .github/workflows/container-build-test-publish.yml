name: Container Build, Test & Publish

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, closed]

env:
  REGISTRY: ghcr.io

jobs:
  # Detect which containers have changed to optimize CI execution
  detect-changes:
    name: 🔍 Detect Container Changes
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.action != 'closed'
    outputs:
      shared: ${{ steps.filter.outputs.shared }}
      bunkbot: ${{ steps.filter.outputs.bunkbot }}
      djcova: ${{ steps.filter.outputs.djcova }}
      starbunk-dnd: ${{ steps.filter.outputs.starbunk-dnd }}
      covabot: ${{ steps.filter.outputs.covabot }}
      root-files: ${{ steps.filter.outputs.root-files }}
      workflows: ${{ steps.filter.outputs.workflows }}
      docker: ${{ steps.filter.outputs.docker }}
      # Dynamic matrix outputs
      containers-matrix: ${{ steps.set-matrix.outputs.containers }}
      test-shared: ${{ steps.set-matrix.outputs.test-shared }}
      any-container-changed: ${{ steps.set-matrix.outputs.any-changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for file change detection

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            shared:
              - 'containers/shared/**'
            bunkbot:
              - 'containers/bunkbot/**'
            djcova:
              - 'containers/djcova/**'
            starbunk-dnd:
              - 'containers/starbunk-dnd/**'
            covabot:
              - 'containers/covabot/**'
            root-files:
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - '.eslintrc.json'
              - 'jest.config.js'
            workflows:
              - '.github/workflows/**'
            docker:
              - 'docker-compose*.yml'
              - 'Dockerfile*'
              - '.dockerignore'

      - name: Set dynamic matrix and flags
        id: set-matrix
        run: |
          # Initialize arrays
          containers=()

          # Check if shared changed (affects all containers)
          if [[ "${{ steps.filter.outputs.shared }}" == "true" || "${{ steps.filter.outputs.root-files }}" == "true" || "${{ steps.filter.outputs.workflows }}" == "true" || "${{ steps.filter.outputs.docker }}" == "true" ]]; then
            echo "Shared files or critical files changed - processing all containers"
            containers=("bunkbot" "djcova" "starbunk-dnd" "covabot")
            echo "test-shared=true" >> $GITHUB_OUTPUT
          else
            echo "test-shared=${{ steps.filter.outputs.shared }}" >> $GITHUB_OUTPUT
            # Only process containers that have changed
            if [[ "${{ steps.filter.outputs.bunkbot }}" == "true" ]]; then
              containers+=("bunkbot")
            fi
            if [[ "${{ steps.filter.outputs.djcova }}" == "true" ]]; then
              containers+=("djcova")
            fi
            if [[ "${{ steps.filter.outputs.starbunk-dnd }}" == "true" ]]; then
              containers+=("starbunk-dnd")
            fi
            if [[ "${{ steps.filter.outputs.covabot }}" == "true" ]]; then
              containers+=("covabot")
            fi
          fi

          # Convert array to JSON for matrix
          if [ ${#containers[@]} -eq 0 ]; then
            echo "containers=[]" >> $GITHUB_OUTPUT
            echo "any-changed=false" >> $GITHUB_OUTPUT
            echo "No containers need processing"
          else
            containers_json=$(printf '%s\n' "${containers[@]}" | jq -R . | jq -s -c .)
            echo "containers=$containers_json" >> $GITHUB_OUTPUT
            echo "any-changed=true" >> $GITHUB_OUTPUT
            echo "Containers to process: ${containers[*]}"
          fi

  # Test shared package first (prerequisite for all containers)
  test-shared:
    name: 📦 Test Shared Package
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.test-shared == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'containers/shared/package-lock.json'

      - name: Install shared dependencies
        run: cd containers/shared && npm ci

      - name: Build shared package
        run: |
          echo "Building shared package..."
          cd containers/shared
          npm run build
          echo "✅ Shared package build completed successfully"

      - name: Test shared package
        run: cd containers/shared && npm test

  # Build and test containers in a single job
  build-test-containers:
    name: 🐳 Build & Test - ${{ matrix.container }}
    runs-on: ubuntu-latest
    needs: [detect-changes, test-shared]
    if: ${{ needs.detect-changes.outputs.any-container-changed == 'true' && needs.detect-changes.outputs.containers-matrix != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.detect-changes.outputs.containers-matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}
          tags: |
            # For main branch pushes
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,enable={{is_default_branch}}
            # For PR builds
            type=raw,value=pr-${{ github.event.pull_request.number }}-snapshot,enable=${{ github.event_name == 'pull_request' }}

      - name: Build container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: containers/${{ matrix.container }}/Dockerfile
          push: false  # Don't push yet, just build and cache
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.container }}
          cache-to: type=gha,mode=max,scope=${{ matrix.container }}
          platforms: linux/amd64
          outputs: type=docker,dest=/tmp/${{ matrix.container }}-image.tar

      - name: Load and test container image
        run: |
          # Load the built image
          docker load --input /tmp/${{ matrix.container }}-image.tar
          
          # Basic smoke test - verify the image can start
          echo "Testing container startup..."
          timeout 30s docker run --rm \
            -e STARBUNK_TOKEN=test_token_for_validation \
            -e DEBUG_MODE=true \
            ${{ steps.meta.outputs.tags }} \
            node --version || echo "Container validation completed"

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.container }}-image
          path: /tmp/${{ matrix.container }}-image.tar
          retention-days: 1

  # Publish containers (only after successful build and test)
  publish-containers:
    name: 📦 Publish - ${{ matrix.container }}
    runs-on: ubuntu-latest
    needs: [detect-changes, build-test-containers]
    if: ${{ needs.detect-changes.outputs.any-container-changed == 'true' && needs.detect-changes.outputs.containers-matrix != '[]' && (github.ref == 'refs/heads/main' || github.event_name == 'pull_request') }}
    permissions:
      contents: read
      packages: write
      pull-requests: write  # For PR comments
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.detect-changes.outputs.containers-matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.container }}-image
          path: /tmp

      - name: Load and push image
        run: |
          # Load the pre-built image
          docker load --input /tmp/${{ matrix.container }}-image.tar
          
          # Push all tags
          docker images --format "table {{.Repository}}:{{.Tag}}" | grep "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}" | while read image; do
            echo "Pushing $image..."
            docker push "$image"
          done

      - name: Add PR Comment (for PR builds)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const container = '${{ matrix.container }}';
            const imageTag = `ghcr.io/${owner}/${container}:pr-${prNumber}-snapshot`;

            const comment = `🐳 **Container Built, Tested & Published: \`${container}\`**

            **Image:** \`${imageTag}\`
            **Pull Command:** \`docker pull ${imageTag}\`

            ✅ **Build & Test:** Image built and validated successfully
            📦 **Published:** Available in GitHub Container Registry
            🗑️ **Cleanup:** Image will be deleted when PR is closed`;

            // Update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner, repo, issue_number: prNumber
            });

            const existingComment = comments.find(comment =>
              comment.body.includes(`Container Built, Tested & Published: \`${container}\``)
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner, repo, comment_id: existingComment.id, body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner, repo, issue_number: prNumber, body: comment
              });
            }

  # Clean up PR images when PR is closed
  cleanup-pr-images:
    name: 🗑️ Cleanup PR Images
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Delete PR images
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const containers = ['bunkbot', 'djcova', 'starbunk-dnd', 'covabot'];

            for (const container of containers) {
              try {
                const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                  package_type: 'container',
                  package_name: container,
                  username: owner
                });

                const prVersions = versions.filter(version =>
                  version.metadata?.container?.tags?.some(tag => tag === `pr-${prNumber}-snapshot`)
                );

                for (const version of prVersions) {
                  await github.rest.packages.deletePackageVersionForUser({
                    package_type: 'container',
                    package_name: container,
                    username: owner,
                    package_version_id: version.id
                  });
                }
              } catch (error) {
                console.log(`Failed to delete ${container} image:`, error.message);
              }
            }
