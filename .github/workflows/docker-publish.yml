name: PR Docker Image Publisher

on:
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened, closed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Detect which containers have changed to optimize Docker builds
  detect-changes:
    name: 🔍 Detect Container Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    outputs:
      shared: ${{ steps.filter.outputs.shared }}
      bunkbot: ${{ steps.filter.outputs.bunkbot }}
      djcova: ${{ steps.filter.outputs.djcova }}
      starbunk-dnd: ${{ steps.filter.outputs.starbunk-dnd }}
      covabot: ${{ steps.filter.outputs.covabot }}
      root-files: ${{ steps.filter.outputs.root-files }}
      workflows: ${{ steps.filter.outputs.workflows }}
      docker: ${{ steps.filter.outputs.docker }}
      # Dynamic matrix outputs
      containers-matrix: ${{ steps.set-matrix.outputs.containers }}
      any-container-changed: ${{ steps.set-matrix.outputs.any-changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for file change detection

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            shared:
              - 'containers/shared/**'
            bunkbot:
              - 'containers/bunkbot/**'
            djcova:
              - 'containers/djcova/**'
            starbunk-dnd:
              - 'containers/starbunk-dnd/**'
            covabot:
              - 'containers/covabot/**'
            root-files:
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - '.eslintrc.json'
              - 'jest.config.js'
            workflows:
              - '.github/workflows/**'
            docker:
              - 'Dockerfile*'
              - '.dockerignore'
              - 'docker-compose*.yml'

      - name: Set dynamic matrix and flags
        id: set-matrix
        run: |
          # Initialize arrays
          containers=()

          # Check if shared changed (affects all containers)
          if [[ "${{ steps.filter.outputs.shared }}" == "true" || "${{ steps.filter.outputs.root-files }}" == "true" || "${{ steps.filter.outputs.workflows }}" == "true" || "${{ steps.filter.outputs.docker }}" == "true" ]]; then
            echo "Shared files or critical files changed - building all containers"
            containers=("bunkbot" "djcova" "starbunk-dnd" "covabot")
          else
            # Only build containers that have changed
            if [[ "${{ steps.filter.outputs.bunkbot }}" == "true" ]]; then
              containers+=("bunkbot")
            fi
            if [[ "${{ steps.filter.outputs.djcova }}" == "true" ]]; then
              containers+=("djcova")
            fi
            if [[ "${{ steps.filter.outputs.starbunk-dnd }}" == "true" ]]; then
              containers+=("starbunk-dnd")
            fi
            if [[ "${{ steps.filter.outputs.covabot }}" == "true" ]]; then
              containers+=("covabot")
            fi
          fi

          # Convert array to JSON for matrix
          if [ ${#containers[@]} -eq 0 ]; then
            echo "containers=[]" >> $GITHUB_OUTPUT
            echo "any-changed=false" >> $GITHUB_OUTPUT
            echo "No containers need building"
          else
            containers_json=$(printf '%s\n' "${containers[@]}" | jq -R . | jq -s -c .)
            echo "containers=$containers_json" >> $GITHUB_OUTPUT
            echo "any-changed=true" >> $GITHUB_OUTPUT
            echo "Containers to build: ${containers[*]}"
          fi
  publish-pr-image:
    name: 🚀 Publish PR Images - ${{ matrix.container }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' && needs.detect-changes.outputs.any-container-changed == 'true' }}
    permissions:
      packages: write
      contents: read
      pull-requests: write  # For commenting on PRs
    strategy:
      fail-fast: false  # Continue building other containers even if one fails
      matrix:
        container: ${{ fromJson(needs.detect-changes.outputs.containers-matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for ${{ matrix.container }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.container }}
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }}
            type=raw,value=pr-${{ github.event.pull_request.number }}-{{sha}}

      - name: Build and Push PR Image for ${{ matrix.container }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: containers/${{ matrix.container }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.container }}
          cache-to: type=gha,mode=max,scope=${{ matrix.container }}
          platforms: linux/amd64

      - name: Add PR Comment with Image Info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const container = '${{ matrix.container }}';
            const imageTag = `ghcr.io/${owner}/${repo}/${container}:pr-${prNumber}`;

            const comment = `🐳 **Docker Image Published for \`${container}\`**

            **Image:** \`${imageTag}\`
            **Pull Command:** \`docker pull ${imageTag}\`

            This image will be automatically deleted when the PR is closed.`;

            // Check if we already commented for this container
            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber
            });

            const existingComment = comments.find(comment =>
              comment.body.includes(`Docker Image Published for \`${container}\``)
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: comment
              });
            }

  delete-pr-image:
    name: 🗑️ Delete PR Images
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Delete PR images for all containers
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const containers = ['bunkbot', 'djcova', 'starbunk-dnd', 'covabot'];

            console.log(`Attempting to delete PR images for PR ${prNumber}...`);

            for (const container of containers) {
              try {
                console.log(`Deleting ${container} PR image...`);

                // Get all versions of the package
                const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                  package_type: 'container',
                  package_name: `${repo}/${container}`,
                  username: owner
                });

                // Find versions with PR tags
                const prVersions = versions.filter(version =>
                  version.metadata &&
                  version.metadata.container &&
                  version.metadata.container.tags &&
                  version.metadata.container.tags.some(tag =>
                    tag.startsWith(`pr-${prNumber}`)
                  )
                );

                // Delete each PR version
                for (const version of prVersions) {
                  console.log(`Deleting version ${version.id} with tags: ${version.metadata.container.tags.join(', ')}`);
                  await github.rest.packages.deletePackageVersionForUser({
                    package_type: 'container',
                    package_name: `${repo}/${container}`,
                    username: owner,
                    package_version_id: version.id
                  });
                }

                if (prVersions.length === 0) {
                  console.log(`No PR images found for ${container}`);
                }

              } catch (error) {
                console.log(`Failed to delete ${container} image:`, error.message);
                // Don't fail the job if image doesn't exist
              }
            }
