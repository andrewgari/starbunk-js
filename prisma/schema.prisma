// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Campaign {
  id            String       @id @default(uuid())
  name          String
  system        String      // Game system (e.g., D&D, Pathfinder)
  gmId          String      // Discord user ID of the GM
  textChannelId String      // Discord channel ID
  voiceChannelId String?    // Optional voice channel ID
  adventureId   String?     // Optional adventure identifier
  guildId       String      // Discord server ID
  isActive      Boolean     @default(true)
  webhookId     String?     // Discord webhook ID
  roleId        String?     // Discord role ID
  metadata      String?     // JSON string for additional metadata
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  characters    Character[]
  messages      Message[]
  notes         Note[]
  files         StoredFile[]
  gameSessions  GameSession[]

  @@unique([textChannelId, guildId])
  @@index([gmId])
  @@index([guildId])
}

model Character {
  id         String   @id @default(uuid())
  name       String
  avatarUrl  String?
  playerId   String   // Discord user ID
  campaignId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@unique([name, campaignId])
  @@index([playerId])
  @@index([campaignId])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  authorId   String   // Discord user ID
  userId     String   // Alias for authorId for compatibility
  messageId  String   // Discord message ID
  timestamp  DateTime // Message timestamp
  campaignId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@index([authorId])
  @@index([campaignId])
  @@index([messageId])
}

model Note {
  id         String   @id @default(uuid())
  title      String
  content    String
  authorId   String   // Discord user ID
  campaignId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@index([authorId])
  @@index([campaignId])
}

model TimeEntry {
  id           String   @id @default(uuid())
  userId       String
  activityType String
  startTime    DateTime
  endTime      DateTime?
}

model StoredFile {
  id         String   @id @default(uuid())
  name       String
  url        String
  path       String   // Local file path
  type       String
  mimeType   String   // MIME type of the file
  size       Int
  uploaderId String   // Discord user ID
  campaignId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@index([uploaderId])
  @@index([campaignId])
}

model BotFrequency {
  id          String   @id @default(uuid())
  botName     String   @unique
  frequency   Int      // 0-100
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model GameSession {
  id          String   @id @default(uuid())
  name        String
  startTime   DateTime
  endTime     DateTime?
  campaignId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  campaign    Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}
