# Code Rabbit Configuration for Starbunk Discord Bot Project
# Optimized for TypeScript/Node.js containerized architecture

# Review settings
reviews:
  # Enable high-quality reviews with focus on security and performance
  high_level_summary: true
  poem: false
  review_status: true

  # Path-based review assignments
  path_instructions:
    - path: "containers/shared/**"
      instructions: |
        Shared utilities and services library - Focus on:
        - Breaking changes that affect all containers
        - Performance implications for shared services
        - Type safety and API consistency
        - Memory leaks in shared utilities
        - Security vulnerabilities in shared code

    - path: "containers/bunkbot/**"
      instructions: |
        Discord bot with listener, webhook, identity, guild functionality - Focus on:
        - Discord.js best practices and rate limiting
        - Guild-specific message handling and filtering
        - Webhook integrations and error handling
        - Identity service usage and validation
        - Error handling for Discord API failures

    - path: "containers/djcova/**"
      instructions: |
        Server-agnostic music bot with no identity requirements - Focus on:
        - Audio streaming performance and memory usage
        - YouTube-dl integration and FFmpeg processing
        - Voice connection management and cleanup
        - Queue management and concurrent access
        - Memory usage optimization for audio processing

    - path: "containers/covabot/**"
      instructions: |
        Discord bot with listener, identity, LLM integration, AI functionality - Focus on:
        - LLM integration security and rate limiting
        - Identity management and server/channel restrictions
        - Conversation memory handling and persistence
        - Vector database query optimization
        - AI service error handling and fallbacks

    - path: "containers/starbunk-dnd/**"
      instructions: |
        D&D bot with game mechanics and rule engine functionality - Focus on:
        - D&D rule engine accuracy and performance
        - Game state management and persistence
        - User input validation and sanitization
        - Dice rolling and probability calculations
        - Character sheet and campaign data handling

    - path: "containers/snowbunk/**"
      instructions: |
        Production-only message bridge for two specific guilds with identity - Focus on:
        - Production deployment considerations and stability
        - Identity verification and guild-specific logic
        - Message synchronization between guilds
        - Cross-guild bridging error handling
        - Resource optimization for production workloads

    - path: ".github/workflows/**"
      instructions: |
        Focus on:
        - CI/CD security and secret handling
        - Resource optimization and cost efficiency
        - Workflow reliability and error handling
        - Container build optimization
        - Path-based conditional logic correctness

    - path: "containers/*/package.json"
      instructions: |
        Focus on:
        - Dependency security vulnerabilities
        - Version compatibility issues
        - Unnecessary dependencies
        - License compatibility

    - path: "docker-compose*.yml"
      instructions: |
        Focus on:
        - Container security configurations
        - Resource limits and health checks
        - Network security and isolation
        - Volume mount security
        - Environment variable handling

# Language-specific settings for TypeScript/Node.js
language_settings:
  typescript:
    # Focus areas for TypeScript code
    focus_areas:
      - type_safety
      - performance
      - security
      - maintainability
      - error_handling

    # TypeScript-specific rules
    rules:
      - name: "strict_null_checks"
        description: "Ensure strict null checking is used"
        pattern: "strictNullChecks.*false"
        severity: "error"

      - name: "no_any_type"
        description: "Avoid using 'any' type unless absolutely necessary"
        pattern: ":\\s*any\\b"
        severity: "warning"

      - name: "async_await_usage"
        description: "Prefer async/await over Promise chains"
        pattern: "\\.then\\("
        severity: "info"

      - name: "error_handling"
        description: "Ensure proper error handling in async functions"
        pattern: "async.*\\{[^}]*(?!.*try)"
        severity: "warning"

  javascript:
    focus_areas:
      - security
      - performance
      - error_handling

# Container-specific review settings
container_settings:
  shared:
    description: "Utilities and shared services library"
    focus_areas:
      - "Breaking changes affecting all containers"
      - "Performance implications for shared services"
      - "Type safety and API consistency"
      - "Memory leaks in shared utilities"
      - "Security vulnerabilities in shared code"

  bunkbot:
    description: "Discord bot with listener, webhook, identity, and guild-specific functionality"
    focus_areas:
      - "Discord.js best practices and rate limiting"
      - "Guild-specific message handling and filtering"
      - "Webhook integrations and error handling"
      - "Identity service usage and validation"
      - "Error handling for Discord API failures"

  djcova:
    description: "Server-agnostic music bot with no identity requirements"
    focus_areas:
      - "Audio streaming performance and memory usage"
      - "YouTube-dl integration and FFmpeg processing"
      - "Voice connection management and cleanup"
      - "Queue management and concurrent access"
      - "Memory usage optimization for audio processing"

  covabot:
    description: "Discord bot with listener, identity, LLM integration, and AI functionality"
    focus_areas:
      - "LLM integration security and rate limiting"
      - "Identity management and server/channel restrictions"
      - "Conversation memory handling and persistence"
      - "Vector database query optimization"
      - "AI service error handling and fallbacks"

  "starbunk-dnd":
    description: "D&D bot with game mechanics and rule engine functionality"
    focus_areas:
      - "D&D rule engine accuracy and performance"
      - "Game state management and persistence"
      - "User input validation and sanitization"
      - "Dice rolling and probability calculations"
      - "Character sheet and campaign data handling"

  snowbunk:
    description: "Production-only message bridge for two specific guilds with identity requirements"
    focus_areas:
      - "Production deployment considerations and stability"
      - "Identity verification and guild-specific logic"
      - "Message synchronization between guilds"
      - "Cross-guild bridging error handling"
      - "Resource optimization for production workloads"

# Security-focused review settings
security:
  enabled: true
  focus_areas:
    - "Environment variable and secret handling"
    - "Input validation and sanitization"
    - "Authentication and authorization"
    - "Dependency vulnerabilities"
    - "Container security configurations"
    - "API rate limiting and abuse prevention"

  # Security patterns to watch for
  patterns:
    - name: "hardcoded_secrets"
      pattern: "(password|token|key|secret)\\s*[=:]\\s*['\"][^'\"]+['\"]"
      severity: "critical"

    - name: "sql_injection"
      pattern: "\\$\\{.*\\}.*query|query.*\\$\\{.*\\}"
      severity: "high"

    - name: "unsafe_eval"
      pattern: "eval\\(|Function\\(|setTimeout\\(.*string|setInterval\\(.*string"
      severity: "high"

    - name: "insecure_random"
      pattern: "Math\\.random\\(\\)"
      severity: "medium"

# Performance review settings
performance:
  enabled: true
  focus_areas:
    - "Memory leaks and resource cleanup"
    - "Inefficient database queries"
    - "Blocking operations in event loops"
    - "Large object allocations"
    - "Inefficient algorithms and data structures"

  patterns:
    - name: "memory_leak_potential"
      pattern: "setInterval|setTimeout.*(?!clear)"
      severity: "medium"

    - name: "blocking_operations"
      pattern: "fs\\.readFileSync|fs\\.writeFileSync"
      severity: "warning"

    - name: "inefficient_loops"
      pattern: "for.*in.*Object\\.keys"
      severity: "info"

# Integration with existing CI/CD
ci_integration:
  # Work with existing tag-based triggering
  respect_labels:
    - "review"
    - "publish"
    - "documentation"
    - "security"
    - "performance"

  # Skip review for certain automated changes
  skip_patterns:
    - "^chore\\(deps\\): update"
    - "^docs: update"
    - "^ci: update"

  # Enhanced review for critical changes
  enhanced_review_patterns:
    - "containers/shared/**"
    - ".github/workflows/**"
    - "docker-compose*.yml"
    - "**/package.json"

# Custom instructions for Discord bot development
discord_bot_guidelines:
  general:
    - "Ensure proper Discord.js rate limiting and error handling"
    - "Validate all user inputs and sanitize content"
    - "Use proper logging levels and structured logging"
    - "Implement graceful shutdown and cleanup procedures"
    - "Follow Discord bot best practices for permissions and intents"
    - "Ensure container health checks and monitoring"
    - "Use environment variables for all configuration"
    - "Implement proper error boundaries and fallback mechanisms"

  container_specific:
    bunkbot:
      - "Implement guild-specific message filtering and webhook handling"
      - "Ensure identity service integration for user verification"
      - "Handle Discord API rate limits for high-volume guilds"

    djcova:
      - "Optimize audio processing and memory usage for music streaming"
      - "Implement proper voice connection cleanup and error recovery"
      - "Handle YouTube-dl and FFmpeg integration robustly"

    covabot:
      - "Secure LLM API integration with proper rate limiting"
      - "Implement conversation memory with vector database optimization"
      - "Ensure server/channel restrictions are properly enforced"

    starbunk-dnd:
      - "Validate D&D rule calculations and game state consistency"
      - "Implement secure character sheet and campaign data handling"
      - "Ensure dice rolling algorithms are fair and auditable"

    snowbunk:
      - "Implement robust cross-guild message bridging with error handling"
      - "Ensure production-grade stability and monitoring"
      - "Handle identity verification for guild-specific operations"

# Quality gates
quality_gates:
  # Minimum requirements for approval
  requirements:
    - "No critical security issues"
    - "No high-severity performance issues"
    - "Proper error handling implemented"
    - "Tests updated for new functionality"
    - "Documentation updated if needed"

  # Metrics to track
  metrics:
    - code_coverage
    - cyclomatic_complexity
    - security_score
    - performance_score
    - maintainability_index
