name: Reusable Docker Build and Push

on:
  workflow_call:
    inputs:
      container_name:
        description: 'Name of the container to build (bunkbot, djcova, starbunk-dnd, covabot)'
        required: true
        type: string
      image_tag:
        description: 'Tag for the Docker image'
        required: true
        type: string
      push_image:
        description: 'Whether to push the image to registry'
        required: false
        type: boolean
        default: true
      registry:
        description: 'Container registry URL'
        required: false
        type: string
        default: 'ghcr.io'
    secrets:
      GITHUB_TOKEN:
        required: true

# This workflow should ONLY be called by other workflows, never triggered directly
# If you see this workflow failing, it means it's being triggered incorrectly



jobs:
  changes:
    name: Detect Docker-related changes
    runs-on: ubuntu-latest
    outputs:
      docker_related: ${{ steps.filter.outputs.docker_related }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Determine changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            docker_related:
              - 'containers/${{ inputs.container_name }}/**'
              - 'containers/${{ inputs.container_name }}/Dockerfile'
              - 'docker-compose*.yml'
              - '.github/workflows/docker-*.yml'

  build-and-push:
    name: 🐳 Build & Push ${{ inputs.container_name }}
    needs: changes
    runs-on: ubuntu-latest
    # Only run if called and relevant paths changed
    if: github.event_name == 'workflow_call' && needs.changes.outputs.docker_related == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Debug inputs
        run: |
          echo "Container name: ${{ inputs.container_name }}"
          echo "Image tag: ${{ inputs.image_tag }}"
          echo "Push image: ${{ inputs.push_image }}"
          echo "Registry: ${{ inputs.registry }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
          buildkitd-flags: --allow-insecure-entitlement network.host

      - name: Log in to Container Registry
        if: ${{ inputs.push_image }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.container_name }}
          tags: |
            type=raw,value=${{ inputs.image_tag }}

      - name: Verify container directory exists
        run: |
          CONTAINER_DIR="${{ inputs.container_name }}"

          if [ ! -d "containers/$CONTAINER_DIR" ]; then
            echo "Error: Container directory containers/$CONTAINER_DIR does not exist"
            exit 1
          fi
          if [ ! -f "containers/$CONTAINER_DIR/Dockerfile" ]; then
            echo "Error: Dockerfile not found in containers/$CONTAINER_DIR"
            exit 1
          fi

          echo "CONTAINER_DIR=$CONTAINER_DIR" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: containers/${{ env.CONTAINER_DIR }}/Dockerfile
          push: ${{ inputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ inputs.container_name }}
            type=registry,ref=${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.container_name }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=${{ inputs.container_name }}
            type=registry,ref=${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.container_name }}:buildcache,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Output image details
        run: |
          echo "Built image: ${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.container_name }}:${{ inputs.image_tag }}"
          echo "Container: ${{ inputs.container_name }}"
          echo "Tag: ${{ inputs.image_tag }}"
          echo "Pushed: ${{ inputs.push_image }}"
