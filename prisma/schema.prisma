// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:../data/starbunk.db"
}

model Campaign {
  id            String       @id @default(uuid())
  name          String
  system        String       // Stored as JSON string
  textChannelId String
  voiceChannelId String
  gmId          String
  adventureId   String?
  isActive      Boolean      @default(true)
  metadata      String?      // Stored as JSON string
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  messages      Message[]
  notes         Note[]
  files         StoredFile[]
  gameSessions  GameSession[]
}

model GameSession {
  id          String     @id @default(uuid())
  campaignId  String
  name        String
  channelId   String
  createdBy   String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  campaign    Campaign   @relation(fields: [campaignId], references: [id])
}

model Message {
  id          String   @id @default(uuid())
  campaignId  String
  content     String
  userId      String
  messageId   String
  timestamp   DateTime @default(now())

  campaign    Campaign @relation(fields: [campaignId], references: [id])
}

model Note {
  id          String   @id @default(uuid())
  campaignId  String
  content     String
  userId      String
  isGM        Boolean  @default(false)
  tags        String   // Stored as comma-separated
  createdAt   DateTime @default(now())

  campaign    Campaign @relation(fields: [campaignId], references: [id])
}

model TimeEntry {
  id           String   @id @default(uuid())
  userId       String
  activityType String
  startTime    DateTime
  endTime      DateTime?
}

model StoredFile {
  id          String   @id @default(uuid())
  campaignId  String
  name        String
  path        String
  mimeType    String
  size        Int
  createdAt   DateTime @default(now())

  campaign    Campaign @relation(fields: [campaignId], references: [id])
}

model BotFrequency {
  id          String   @id @default(uuid())
  botName     String   @unique
  frequency   Int      // 0-100
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model Guild {
  id          String   @id
  name        String
  channels    Channel[]
  roles       Role[]
  users       UserOnGuild[]
  blacklists  Blacklist[]
}

model Channel {
  id        String   @id
  name      String
  guildId   String
  guild     Guild    @relation(fields: [guildId], references: [id])
}

model Role {
  id        String   @id
  name      String
  guildId   String
  guild     Guild    @relation(fields: [guildId], references: [id])
}

model User {
  id        String   @id
  name      String
  guilds    UserOnGuild[]
  blacklists Blacklist[]
}

model UserOnGuild {
  id        String   @id @default(uuid())
  userId    String
  guildId   String
  user      User     @relation(fields: [userId], references: [id])
  guild     Guild    @relation(fields: [guildId], references: [id])
  @@unique([userId, guildId])
}

model Blacklist {
  id        String   @id @default(uuid())
  guildId   String
  userId    String
  guild     Guild    @relation(fields: [guildId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  @@unique([guildId, userId])
}

model ChannelBridge {
  id            String   @id @default(uuid())
  sourceChannelId String
  targetChannelId String
  name          String?  // Optional name for the bridge (e.g., "memes", "ff14-general")
  sourceServer  String?  // Server name for the source channel (e.g., "Starbunk", "Snowfall")
  targetServer  String?  // Server name for the target channel (e.g., "Starbunk", "Snowfall")
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Ensure we don't have duplicate bridges
  @@unique([sourceChannelId, targetChannelId])
}
