name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "containers/**/*.ts"
      - "containers/**/*.tsx"
      - "containers/**/*.js"
      - "containers/**/*.jsx"
      - "containers/**/test/**"
      - "containers/**/*.test.*"
      - "containers/**/*.spec.*"

jobs:
  claude-review:
    name: 'ðŸ¤– AI Code Review - Advanced Prompts'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Advanced file-type specific prompts
          direct_prompt: |
            Please review this pull request with specialized focus based on file types:

            **For TypeScript/JavaScript Discord Bot Files:**
            - Type safety and proper interface usage
            - Discord.js best practices and API usage
            - Event handling and error management
            - Memory management and resource cleanup
            - Async/await patterns and Promise handling

            **For Container-Specific Code:**
            - Modular architecture adherence
            - Dependency injection patterns
            - Service layer implementations
            - Configuration management
            - Container health and lifecycle management

            **For Database/Storage Code:**
            - SQL injection prevention
            - Connection pooling and management
            - Transaction handling
            - Data validation and sanitization
            - Migration safety

            **For Test Files:**
            - Test coverage and edge cases
            - Mock usage and test isolation
            - AAA (Arrange-Act-Assert) pattern
            - Integration vs unit test appropriateness
            - Test performance and reliability

            **For API/Web Interface Code:**
            - Input validation and sanitization
            - Authentication and authorization
            - Rate limiting and security headers
            - Error handling and logging
            - Performance and caching strategies

            **General Code Quality:**
            - Code maintainability and readability
            - Performance optimizations
            - Security vulnerabilities
            - Documentation completeness
            - Adherence to project coding standards

            Be constructive, specific, and provide actionable feedback. Focus on Discord bot architecture, TypeScript best practices, and container-based microservices patterns.
