version: '3.8'

services:
  # Shared database service
  postgres:
    image: postgres:15-alpine
    container_name: starbunk-postgres-dev
    environment:
      POSTGRES_DB: starbunk_dev
      POSTGRES_USER: starbunk
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-starbunk123}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U starbunk"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BunkBot - Reply bots and admin commands (Development)
  bunkbot:
    build:
      context: .
      dockerfile: containers/bunkbot/Dockerfile
      target: builder
    container_name: starbunk-bunkbot-dev
    environment:
      - NODE_ENV=development
      - DEBUG=true
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OLLAMA_API_URL=${OLLAMA_API_URL}
    volumes:
      - ./containers/bunkbot/src:/app/src:Z
      - ./containers/shared/src:/app/shared/src:Z
      - ./data:/app/data:Z,rw
      - ./logs:/app/logs:Z,rw
    command: npm run dev
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # DJCova - Music service (Development)
  djcova:
    build:
      context: .
      dockerfile: containers/djcova/Dockerfile
      target: builder
    container_name: starbunk-djcova-dev
    environment:
      - NODE_ENV=development
      - DEBUG=true
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
    volumes:
      - ./containers/djcova/src:/app/src:Z
      - ./containers/shared/src:/app/shared/src:Z
      - ./data/music:/app/data/music:Z,rw
      - ./logs:/app/logs:Z,rw
    command: npm run dev
    restart: unless-stopped

  # Starbunk-DND - D&D features and Snowbunk bridge (Development)
  starbunk-dnd:
    build:
      context: .
      dockerfile: containers/starbunk-dnd/Dockerfile
      target: builder
    container_name: starbunk-dnd-dev
    environment:
      - NODE_ENV=development
      - DEBUG=true
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
      - SNOWBUNK_TOKEN=${SNOWBUNK_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OLLAMA_API_URL=${OLLAMA_API_URL}
      - VECTOR_CONTEXT_DIR=/app/data/vectors
    volumes:
      - ./containers/starbunk-dnd/src:/app/src:Z
      - ./containers/shared/src:/app/shared/src:Z
      - ./data:/app/data:Z,rw
      - ./data/campaigns:/app/data/campaigns:Z,rw
      - ./data/vectors:/app/data/vectors:Z,rw
      - ./logs:/app/logs:Z,rw
    command: npm run dev
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # CovaBot - AI personality bot (Development)
  covabot:
    build:
      context: .
      dockerfile: containers/covabot/Dockerfile
      target: builder
    container_name: starbunk-covabot-dev
    environment:
      - NODE_ENV=development
      - DEBUG=true
      - STARBUNK_TOKEN=${STARBUNK_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OLLAMA_API_URL=${OLLAMA_API_URL}
    volumes:
      - ./containers/covabot/src:/app/src:Z
      - ./containers/shared/src:/app/shared/src:Z
      - ./data:/app/data:Z,rw
      - ./logs:/app/logs:Z,rw
    command: npm run dev
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_dev_data:
    driver: local

networks:
  default:
    name: starbunk-dev-network
