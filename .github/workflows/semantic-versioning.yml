name: Semantic Versioning & Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
          - prerelease
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # Analyze commits to determine version bump
  analyze-commits:
    name: 📊 Analyze Commits
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      should-release: ${{ steps.analysis.outputs.should-release }}
      release-type: ${{ steps.analysis.outputs.release-type }}
      new-version: ${{ steps.analysis.outputs.new-version }}
      current-version: ${{ steps.analysis.outputs.current-version }}
      changelog: ${{ steps.analysis.outputs.changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install semantic release tools
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/changelog
          npm install -g @semantic-release/git
          npm install -g conventional-changelog-cli

      - name: Analyze commits and determine version
        id: analysis
        run: |
          set -e  # Exit on any error

          # Get current version from package.json
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          CURRENT_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, using initial version"
            LAST_TAG="v0.0.0"
            # For first release, check commits from beginning
            COMMITS=$(git log --oneline --no-merges | head -20)
          else
            echo "Last tag: $LAST_TAG"
            # Get commits since last tag
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-merges)
          fi

          if [ -z "$COMMITS" ]; then
            echo "No new commits since last release"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found commits since last release:"
          echo "$COMMITS"

          # Analyze commit types
          HAS_BREAKING=false
          HAS_FEAT=false
          HAS_FIX=false

          while IFS= read -r commit; do
            if echo "$commit" | grep -qE "(BREAKING CHANGE|!:)"; then
              HAS_BREAKING=true
              echo "Found breaking change: $commit"
            elif echo "$commit" | grep -qE "^[a-f0-9]+ feat(\(.+\))?:"; then
              HAS_FEAT=true
              echo "Found feature: $commit"
            elif echo "$commit" | grep -qE "^[a-f0-9]+ fix(\(.+\))?:"; then
              HAS_FIX=true
              echo "Found fix: $commit"
            fi
          done <<< "$COMMITS"

          # Determine release type
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"

          if [ "$RELEASE_TYPE" = "auto" ] || [ "$RELEASE_TYPE" = "" ]; then
            if [ "$HAS_BREAKING" = true ]; then
              RELEASE_TYPE="major"
            elif [ "$HAS_FEAT" = true ]; then
              RELEASE_TYPE="minor"
            elif [ "$HAS_FIX" = true ]; then
              RELEASE_TYPE="patch"
            else
              echo "No significant changes found (no feat:, fix:, or BREAKING CHANGE)"
              echo "should-release=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          echo "Determined release type: $RELEASE_TYPE"
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "should-release=true" >> $GITHUB_OUTPUT

          # Calculate new version
          # Normalise version: strip leading "v" and any pre-release / build metadata
          VERSION_NUMBER="${CURRENT_VERSION#v}"
          BASE_VERSION="${VERSION_NUMBER%%[-+]*}"   # keep only x.y.z
          IFS='.' read -r major minor patch <<< "${BASE_VERSION}"

          # Ensure we have valid numbers
          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}

          case $RELEASE_TYPE in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
            prerelease)
              NEW_VERSION="${VERSION_NUMBER}-rc.$(date +%Y%m%d%H%M%S)"
              ;;
          esac

          echo "New version: $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Generate changelog snippet
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges | head -20)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Create release
  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: analyze-commits
    if: needs.analyze-commits.outputs.should-release == 'true' && github.event.inputs.dry_run != 'true'
    permissions:
      contents: write
      pull-requests: write
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-url: ${{ steps.create-release.outputs.html_url }}
      tag-name: ${{ steps.create-release.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version in package.json
        run: |
          NEW_VERSION="${{ needs.analyze-commits.outputs.new-version }}"

          # Update root package.json
          npm version $NEW_VERSION --no-git-tag-version

          # Update container package.json files
          for container in shared bunkbot djcova starbunk-dnd covabot snowbunk; do
            if [ -f "containers/$container/package.json" ]; then
              cd containers/$container
              npm version $NEW_VERSION --no-git-tag-version
              cd ../..
            fi
          done

      - name: Generate release notes
        id: release-notes
        run: |
          NEW_VERSION="${{ needs.analyze-commits.outputs.new-version }}"
          CURRENT_VERSION="${{ needs.analyze-commits.outputs.current-version }}"
          RELEASE_TYPE="${{ needs.analyze-commits.outputs.release-type }}"

          # Generate comprehensive release notes
          cat > release-notes.md << EOF
          ## 🎉 Release v${NEW_VERSION}

          **Release Type**: ${RELEASE_TYPE}
          **Previous Version**: v${CURRENT_VERSION}

          ### 📋 What's Changed

          ${{ needs.analyze-commits.outputs.changelog }}

          ### 🐳 Container Images

          All container images have been updated to version \`${NEW_VERSION}\`:

          - \`ghcr.io/andrewgari/bunkbot:${NEW_VERSION}\`
          - \`ghcr.io/andrewgari/djcova:${NEW_VERSION}\`
          - \`ghcr.io/andrewgari/starbunk-dnd:${NEW_VERSION}\`
          - \`ghcr.io/andrewgari/covabot:${NEW_VERSION}\`
          - \`ghcr.io/andrewgari/snowbunk:${NEW_VERSION}\`

          ### 🚀 Deployment

          #### Docker Compose (Recommended)
          \`\`\`bash
          # Update docker/docker-compose.yml to use the new version
          docker compose -f docker/docker-compose.yml pull
          docker compose -f docker/docker-compose.yml up -d
          \`\`\`

          #### Individual Containers
          \`\`\`bash
          docker pull ghcr.io/andrewgari/bunkbot:${NEW_VERSION}
          docker pull ghcr.io/andrewgari/djcova:${NEW_VERSION}
          docker pull ghcr.io/andrewgari/starbunk-dnd:${NEW_VERSION}
          docker pull ghcr.io/andrewgari/covabot:${NEW_VERSION}
          docker pull ghcr.io/andrewgari/snowbunk:${NEW_VERSION}
          \`\`\`

          ### 🔧 Breaking Changes

          $(if [ "$RELEASE_TYPE" = "major" ]; then echo "⚠️ This is a major release and may contain breaking changes. Please review the changelog carefully before upgrading."; else echo "✅ No breaking changes in this release."; fi)

          ### 📊 Statistics

          - **Commits**: $(git rev-list --count v${CURRENT_VERSION}..HEAD 2>/dev/null || echo "N/A")
          - **Contributors**: $(git shortlog -sn v${CURRENT_VERSION}..HEAD 2>/dev/null | wc -l || echo "N/A")
          - **Files Changed**: $(git diff --name-only v${CURRENT_VERSION}..HEAD 2>/dev/null | wc -l || echo "N/A")

          ---

          **Full Changelog**: https://github.com/andrewgari/starbunk-js/compare/v${CURRENT_VERSION}...v${NEW_VERSION}
          EOF

          echo "Generated release notes for v${NEW_VERSION}"

      - name: Commit version updates
        run: |
          NEW_VERSION="${{ needs.analyze-commits.outputs.new-version }}"

          git add package.json containers/*/package.json
          git commit -m "chore(release): bump version to v${NEW_VERSION}" \
                     -m "Updated all package.json files to version ${NEW_VERSION}" \
                     -m "Automated version bump for ${{ needs.analyze-commits.outputs.release-type }} release" \
                     -m "Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      - name: Create Git tag
        run: |
          NEW_VERSION="${{ needs.analyze-commits.outputs.new-version }}"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"
          git push origin main

      - name: Create GitHub release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const newVersion = '${{ needs.analyze-commits.outputs.new-version }}';
            const releaseType = '${{ needs.analyze-commits.outputs.release-type }}';

            const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');

            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${newVersion}`,
              name: `v${newVersion}`,
              body: releaseNotes,
              draft: false,
              prerelease: releaseType === 'prerelease',
              generate_release_notes: false
            });

            console.log(`Created release: ${release.html_url}`);

            return {
              id: release.id,
              html_url: release.html_url,
              tag_name: release.tag_name
            };

  # Trigger container builds for the new release
  trigger-container-builds:
    name: 🐳 Trigger Container Builds
    runs-on: ubuntu-latest
    needs: [analyze-commits, create-release]
    if: needs.analyze-commits.outputs.should-release == 'true' && github.event.inputs.dry_run != 'true'
    steps:
      - name: Trigger container build workflow
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const newVersion = '${{ needs.analyze-commits.outputs.new-version }}';

            // Trigger the container build workflow
            await github.rest.actions.createWorkflowDispatch({
              owner,
              repo,
              workflow_id: 'container-build-test-publish.yml',
              ref: 'main',
              inputs: {
                version: newVersion,
                force_build: 'true'
              }
            });

            console.log(`Triggered container builds for version ${newVersion}`);

  # Dry run summary
  dry-run-summary:
    name: 🧪 Dry Run Summary
    runs-on: ubuntu-latest
    needs: analyze-commits
    if: github.event.inputs.dry_run == 'true' && needs.analyze-commits.outputs.should-release == 'true'
    steps:
      - name: Display dry run results
        run: |
          echo "## 🧪 Dry Run Results"
          echo ""
          echo "**Current Version**: ${{ needs.analyze-commits.outputs.current-version }}"
          echo "**New Version**: ${{ needs.analyze-commits.outputs.new-version }}"
          echo "**Release Type**: ${{ needs.analyze-commits.outputs.release-type }}"
          echo ""
          echo "### Changes to be included:"
          echo "${{ needs.analyze-commits.outputs.changelog }}"
          echo ""
          echo "### Actions that would be performed:"
          echo "- Update package.json files"
          echo "- Create Git tag v${{ needs.analyze-commits.outputs.new-version }}"
          echo "- Create GitHub release"
          echo "- Trigger container builds"
          echo ""
          echo "**Note**: This was a dry run. No actual changes were made."
