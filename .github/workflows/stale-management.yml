name: Stale PR & Issue Management

on:
  schedule:
    # Run daily at 1 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch:

# Prevent overlapping runs
concurrency:
  group: stale-management
  cancel-in-progress: false

jobs:
  stale-management:
    name: 🧹 Manage Stale Items
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Handle stale PRs and issues
        uses: actions/stale@v10
        with:
          # Repository token
          repo-token: ${{ secrets.GITHUB_TOKEN }}

          # Stale issue settings
          stale-issue-message: |
            👋 This issue has been automatically marked as stale because it has not had recent activity.

            **What happens next?**
            - This issue will be closed in 7 days if no further activity occurs
            - You can remove the stale label or comment to keep it open
            - If this is still relevant, please provide an update

            **Need help?**
            - Check our [documentation](docs/) for common solutions
            - Review similar issues that might have been resolved
            - Provide additional context if the issue is still valid

            Thank you for your contribution to the project! 🚀

          close-issue-message: |
            🔒 This issue has been automatically closed due to inactivity.

            **Why was this closed?**
            - No activity for 21+ days after being marked stale
            - Assumed to be resolved or no longer relevant

            **Need to reopen?**
            - Comment on this issue to request reopening
            - Create a new issue with updated information
            - Reference this issue number for context

            Thank you for your understanding! 🙏

          # Stale PR settings
          stale-pr-message: |
            🔄 This pull request has been automatically marked as stale due to inactivity.

            **What happens next?**
            - This PR will be closed in 7 days if no further activity occurs
            - You can remove the stale label or push new commits to keep it active
            - Consider rebasing if there are conflicts with the main branch

            **Before this PR is closed:**
            - [ ] Resolve any merge conflicts
            - [ ] Address review feedback
            - [ ] Ensure all tests pass
            - [ ] Update documentation if needed

            **Need help?**
            - Check the [contributing guidelines](CONTRIBUTING.md)
            - Ask for help in the comments
            - Consider creating a draft PR if work is ongoing

            Thanks for your contribution! 🎉

          close-pr-message: |
            🔒 This pull request has been automatically closed due to inactivity.

            **Why was this closed?**
            - No activity for 14+ days after being marked stale
            - Assumed to be abandoned or superseded

            **Want to continue this work?**
            - Reopen this PR and push new commits
            - Create a new PR with updated changes
            - Reference this PR number for context

            Your contributions are valued! Feel free to continue when ready. 💪

          # Timing settings
          days-before-stale: 14
          days-before-close: 7
          days-before-pr-close: 7

          # Label settings
          stale-issue-label: 'stale'
          stale-pr-label: 'stale'
          exempt-issue-labels: 'pinned,security,critical,enhancement,good-first-issue'
          exempt-pr-labels: 'pinned,security,critical,work-in-progress,draft'

          # Only process a limited number to avoid rate limits
          operations-per-run: 50

          # Remove stale label when there's activity
          remove-stale-when-updated: true

          # Don't mark issues/PRs as stale if they have recent comments
          exempt-all-assignees: true

          # Custom settings for different types
          only-labels: ''
          any-of-labels: ''

          # Debug mode (set to true for testing)
          debug-only: false

  # Clean up old workflow runs
  cleanup-workflow-runs:
    name: 🗑️ Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    steps:
      - name: Delete old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // Get all workflows
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner,
              repo
            });

            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

            for (const workflow of workflows.workflows) {
              console.log(`Processing workflow: ${workflow.name}`);

              try {
                // Get workflow runs older than 30 days
                const { data: runs } = await github.rest.actions.listWorkflowRuns({
                  owner,
                  repo,
                  workflow_id: workflow.id,
                  status: 'completed',
                  per_page: 100
                });

                const oldRuns = runs.workflow_runs.filter(run =>
                  new Date(run.created_at) < thirtyDaysAgo
                );

                console.log(`Found ${oldRuns.length} old runs for ${workflow.name}`);

                // Delete old runs (max 10 per workflow to avoid rate limits)
                for (const run of oldRuns.slice(0, 10)) {
                  try {
                    await github.rest.actions.deleteWorkflowRun({
                      owner,
                      repo,
                      run_id: run.id
                    });
                    console.log(`Deleted run ${run.id} from ${workflow.name}`);
                  } catch (error) {
                    console.error(`Failed to delete run ${run.id}:`, error.message);
                  }
                }
              } catch (error) {
                console.error(`Error processing workflow ${workflow.name}:`, error.message);
              }
            }

  # Archive old branches
  archive-old-branches:
    name: 📦 Archive Old Branches
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Archive old feature branches
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // Get all branches
            const { data: branches } = await github.rest.repos.listBranches({
              owner,
              repo,
              per_page: 100
            });

            const sixtyDaysAgo = new Date();
            sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);

            const protectedBranches = ['main', 'develop', 'staging', 'production'];

            for (const branch of branches) {
              // Skip protected branches
              if (protectedBranches.includes(branch.name)) {
                continue;
              }

              // Skip branches that don't look like feature branches
              if (!branch.name.startsWith('feature/') &&
                  !branch.name.startsWith('fix/') &&
                  !branch.name.startsWith('chore/')) {
                continue;
              }

              try {
                // Get the last commit date
                const { data: commit } = await github.rest.repos.getCommit({
                  owner,
                  repo,
                  ref: branch.commit.sha
                });

                const lastCommitDate = new Date(commit.commit.committer.date);

                if (lastCommitDate < sixtyDaysAgo) {
                  // Check if there's an open PR for this branch
                  const { data: prs } = await github.rest.pulls.list({
                    owner,
                    repo,
                    head: `${owner}:${branch.name}`,
                    state: 'open'
                  });

                  if (prs.length === 0) {
                    console.log(`Archiving old branch: ${branch.name} (last commit: ${lastCommitDate.toISOString()})`);

                    // Create an issue to track the archived branch
                    await github.rest.issues.create({
                      owner,
                      repo,
                      title: `Archived branch: ${branch.name}`,
                      body: `This branch was automatically archived due to inactivity.

                      **Branch Details:**
                      - **Name**: \`${branch.name}\`
                      - **Last Commit**: ${lastCommitDate.toISOString()}
                      - **Commit SHA**: \`${branch.commit.sha}\`

                      **To restore this branch:**
                      \`\`\`bash
                      git checkout -b ${branch.name} ${branch.commit.sha}
                      \`\`\`

                      This issue will be automatically closed in 30 days unless there's activity.`,
                      labels: ['archived-branch', 'automated']
                    });

                    // Delete the branch
                    await github.rest.git.deleteRef({
                      owner,
                      repo,
                      ref: `heads/${branch.name}`
                    });

                    console.log(`Successfully archived branch: ${branch.name}`);
                  } else {
                    console.log(`Skipping branch ${branch.name} - has open PR`);
                  }
                }
              } catch (error) {
                console.error(`Error processing branch ${branch.name}:`, error.message);
              }
            }

  # Notify about stale items
  stale-notification:
    name: 📢 Stale Items Notification
    runs-on: ubuntu-latest
    needs: stale-management
    steps:
      - name: Create stale items summary
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // Get stale issues and PRs
            const { data: staleIssues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              labels: 'stale',
              state: 'open',
              per_page: 100
            });

            const issues = staleIssues.filter(item => !item.pull_request);
            const prs = staleIssues.filter(item => item.pull_request);

            if (issues.length > 0 || prs.length > 0) {
              const summary = `## 📊 Stale Items Summary - ${new Date().toISOString().split('T')[0]}

              ### Statistics
              - **Stale Issues**: ${issues.length}
              - **Stale PRs**: ${prs.length}
              - **Total Stale Items**: ${staleIssues.length}

              ### Action Items
              ${issues.length > 0 ? `
              #### Stale Issues (${issues.length})
              ${issues.slice(0, 10).map(issue =>
                `- [#${issue.number}](${issue.html_url}) - ${issue.title}`
              ).join('\n')}
              ${issues.length > 10 ? `\n... and ${issues.length - 10} more` : ''}
              ` : ''}

              ${prs.length > 0 ? `
              #### Stale PRs (${prs.length})
              ${prs.slice(0, 10).map(pr =>
                `- [#${pr.number}](${pr.html_url}) - ${pr.title}`
              ).join('\n')}
              ${prs.length > 10 ? `\n... and ${prs.length - 10} more` : ''}
              ` : ''}

              ### Recommendations
              - Review stale items for continued relevance
              - Close items that are no longer needed
              - Update or comment on items that should remain open
              - Consider converting stale issues to discussions if appropriate

              ---
              *Auto-generated by Stale Management workflow*`;

              // Create or update a pinned issue for stale items tracking
              const { data: existingIssues } = await github.rest.issues.listForRepo({
                owner,
                repo,
                labels: 'stale-summary,pinned',
                state: 'open'
              });

              if (existingIssues.length > 0) {
                // Update existing summary issue
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: existingIssues[0].number,
                  body: summary
                });
              } else if (staleIssues.length >= 5) {
                // Create new summary issue only if there are significant stale items
                await github.rest.issues.create({
                  owner,
                  repo,
                  title: '📊 Stale Items Tracking',
                  body: summary,
                  labels: ['stale-summary', 'pinned', 'automated']
                });
              }
            }
