name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "containers/**/*.ts"
      - "containers/**/*.tsx"
      - "containers/**/*.js"
      - "containers/**/*.jsx"
      - "containers/**/test/**"
      - "containers/**/*.test.*"
      - "containers/**/*.spec.*"

jobs:
  claude-review:
    name: 'ü§ñ AI Code Review - Tool Integration'
    # Skip review for maintainers, focus on external contributors
    if: |
      github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' ||
      github.event.pull_request.author_association == 'CONTRIBUTOR' ||
      contains(fromJSON('["external-contributor", "new-developer"]'), github.event.pull_request.user.login)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        id: lint
        run: npm run lint 2>&1 | tee lint-output.txt || echo "LINT_FAILED=true" >> $GITHUB_ENV
        continue-on-error: true

      - name: Run type checking
        id: typecheck
        run: npm run typecheck 2>&1 | tee typecheck-output.txt || echo "TYPECHECK_FAILED=true" >> $GITHUB_ENV
        continue-on-error: true

      - name: Run tests
        id: test
        run: npm test 2>&1 | tee test-output.txt || echo "TESTS_FAILED=true" >> $GITHUB_ENV
        continue-on-error: true

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Enable tools for running CI/CD commands
          allowed_tools: "Bash(npm run lint),Bash(npm run typecheck),Bash(npm test),Bash(npm run build)"

          # Author-customized prompts with CI/CD tool integration
          direct_prompt: |
            ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
            'Welcome to the project! üéâ This is an encouraging review for a first-time contributor.

            I''ll provide detailed explanations and helpful guidance while reviewing your code.' ||
            'This is a thorough code review focusing on our coding standards and best practices.' }}

            **CI/CD Integration Results:**
            ${{ env.LINT_FAILED == 'true' && '‚ö†Ô∏è Linting issues detected - please review lint-output.txt' || '‚úÖ Linting passed' }}
            ${{ env.TYPECHECK_FAILED == 'true' && '‚ö†Ô∏è Type checking issues detected - please review typecheck-output.txt' || '‚úÖ Type checking passed' }}
            ${{ env.TESTS_FAILED == 'true' && '‚ö†Ô∏è Tests failed - please review test-output.txt' || '‚úÖ Tests passed' }}

            Please review this pull request with specialized focus based on file types:
            Please review this pull request with specialized focus based on file types:

            **For TypeScript/JavaScript Discord Bot Files:**
            - Type safety and proper interface usage
            - Discord.js best practices and API usage
            - Event handling and error management
            - Memory management and resource cleanup
            - Async/await patterns and Promise handling

            **For Container-Specific Code:**
            - Modular architecture adherence
            - Dependency injection patterns
            - Service layer implementations
            - Configuration management
            - Container health and lifecycle management

            **For Database/Storage Code:**
            - SQL injection prevention
            - Connection pooling and management
            - Transaction handling
            - Data validation and sanitization
            - Migration safety

            **For Test Files:**
            - Test coverage and edge cases
            - Mock usage and test isolation
            - AAA (Arrange-Act-Assert) pattern
            - Integration vs unit test appropriateness
            - Test performance and reliability

            **For API/Web Interface Code:**
            - Input validation and sanitization
            - Authentication and authorization
            - Rate limiting and security headers
            - Error handling and logging
            - Performance and caching strategies

            **General Code Quality:**
            - Code maintainability and readability
            - Performance optimizations
            - Security vulnerabilities
            - Documentation completeness
            - Adherence to project coding standards

            ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
            'Be especially encouraging and provide detailed explanations for any suggestions. Include links to documentation where helpful. Focus on learning opportunities and positive reinforcement while maintaining code quality standards.' ||
            'Be constructive, specific, and provide actionable feedback. Focus on Discord bot architecture, TypeScript best practices, and container-based microservices patterns.' }}
